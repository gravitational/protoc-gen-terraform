// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package test

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Nested struct {
	// Nested field
	Str string `protobuf:"bytes,1,opt,name=Str,proto3" json:"Str,omitempty"`
	// Nested message
	Nested []*NestedLevel2 `protobuf:"bytes,2,rep,name=Nested,proto3" json:"Nested,omitempty"`
	// Normal map
	NestedS map[string]string `protobuf:"bytes,3,rep,name=NestedS,proto3" json:"NestedS,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Object map
	NestedM              map[string]*NestedLevel2 `protobuf:"bytes,4,rep,name=NestedM,proto3" json:"NestedM,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Nested) Reset()         { *m = Nested{} }
func (m *Nested) String() string { return proto.CompactTextString(m) }
func (*Nested) ProtoMessage()    {}
func (*Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *Nested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nested.Unmarshal(m, b)
}
func (m *Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nested.Marshal(b, m, deterministic)
}
func (m *Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nested.Merge(m, src)
}
func (m *Nested) XXX_Size() int {
	return xxx_messageInfo_Nested.Size(m)
}
func (m *Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_Nested proto.InternalMessageInfo

type NestedLevel2 struct {
	Str                  string   `protobuf:"bytes,1,opt,name=Str,proto3" json:"Str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NestedLevel2) Reset()         { *m = NestedLevel2{} }
func (m *NestedLevel2) String() string { return proto.CompactTextString(m) }
func (*NestedLevel2) ProtoMessage()    {}
func (*NestedLevel2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *NestedLevel2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedLevel2.Unmarshal(m, b)
}
func (m *NestedLevel2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedLevel2.Marshal(b, m, deterministic)
}
func (m *NestedLevel2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedLevel2.Merge(m, src)
}
func (m *NestedLevel2) XXX_Size() int {
	return xxx_messageInfo_NestedLevel2.Size(m)
}
func (m *NestedLevel2) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedLevel2.DiscardUnknown(m)
}

var xxx_messageInfo_NestedLevel2 proto.InternalMessageInfo

type Test struct {
	// string field
	Str string `protobuf:"bytes,1,opt,name=Str,proto3" json:"Str,omitempty"`
	// int32 field
	Int32 int32 `protobuf:"varint,2,opt,name=Int32,proto3" json:"Int32,omitempty"`
	// int64 field
	Int64 int64 `protobuf:"varint,3,opt,name=Int64,proto3" json:"Int64,omitempty"`
	// float field
	Float float32 `protobuf:"fixed32,4,opt,name=Float,proto3" json:"Float,omitempty"`
	// double field
	Double float64 `protobuf:"fixed64,5,opt,name=Double,proto3" json:"Double,omitempty"`
	// bool field
	Bool bool `protobuf:"varint,6,opt,name=Bool,proto3" json:"Bool,omitempty"`
	// byte[] field
	Bytes []byte `protobuf:"bytes,7,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	// time.Time field
	Timestamp time.Time `protobuf:"bytes,8,opt,name=Timestamp,proto3,stdtime" json:"Timestamp"`
	// time.Duration field (standard)
	DurationStd time.Duration `protobuf:"varint,9,opt,name=DurationStd,proto3,stdduration" json:"DurationStd,omitempty"`
	// time.Duration field (custom)
	DurationCustom Duration `protobuf:"varint,10,opt,name=DurationCustom,proto3,casttype=Duration" json:"DurationCustom,omitempty"`
	// *time.Time field
	TimestampN *time.Time `protobuf:"bytes,11,opt,name=TimestampN,proto3,stdtime" json:"TimestampN,omitempty"`
	// []string field
	StringA []string `protobuf:"bytes,13,rep,name=StringA,proto3" json:"StringA,omitempty"`
	// []bool field
	BoolA []BoolCustomArray `protobuf:"varint,14,rep,packed,name=BoolA,proto3,customtype=BoolCustomArray" json:"BoolA,omitempty"`
	// [][]byte field
	BytesA [][]byte `protobuf:"bytes,15,rep,name=BytesA,proto3" json:"BytesA,omitempty"`
	// []time.Time field
	TimestampA []*time.Time `protobuf:"bytes,16,rep,name=TimestampA,proto3,stdtime" json:"TimestampA,omitempty"`
	// []time.Duration field
	GracePeriodA []Duration `protobuf:"varint,17,rep,packed,name=GracePeriodA,proto3,casttype=Duration" json:"GracePeriodA,omitempty"`
	// Nested field
	Nested *Nested `protobuf:"bytes,18,opt,name=Nested,proto3" json:"Nested,omitempty"`
	// Nested array
	NestedA []*Nested `protobuf:"bytes,19,rep,name=NestedA,proto3" json:"NestedA,omitempty"`
	// Normal map
	NestedS map[string]string `protobuf:"bytes,20,rep,name=NestedS,proto3" json:"NestedS,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Object map
	NestedM              map[string]*Nested `protobuf:"bytes,21,rep,name=NestedM,proto3" json:"NestedM,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Nested)(nil), "test.Nested")
	proto.RegisterMapType((map[string]*NestedLevel2)(nil), "test.Nested.NestedMEntry")
	proto.RegisterMapType((map[string]string)(nil), "test.Nested.NestedSEntry")
	proto.RegisterType((*NestedLevel2)(nil), "test.NestedLevel2")
	proto.RegisterType((*Test)(nil), "test.Test")
	proto.RegisterMapType((map[string]*Nested)(nil), "test.Test.NestedMEntry")
	proto.RegisterMapType((map[string]string)(nil), "test.Test.NestedSEntry")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x8e, 0x12, 0x41,
	0x10, 0x66, 0x98, 0xe1, 0xaf, 0x19, 0x77, 0xd7, 0x5e, 0xd4, 0x96, 0x03, 0x74, 0x88, 0xd9, 0x8c,
	0x1e, 0xc0, 0x85, 0x8d, 0x31, 0x7b, 0x72, 0x46, 0xfc, 0x4b, 0x84, 0x98, 0x86, 0x17, 0x18, 0xa4,
	0x25, 0x64, 0x07, 0x9a, 0xcc, 0x34, 0x6b, 0x78, 0x0a, 0x3d, 0xfa, 0x30, 0x3e, 0x00, 0x47, 0xcf,
	0x1e, 0x30, 0xee, 0x63, 0x78, 0x32, 0xdd, 0x4d, 0x33, 0x03, 0xbb, 0xa8, 0x07, 0x4f, 0xd4, 0x57,
	0xf5, 0x7d, 0x35, 0x5f, 0x17, 0x55, 0x00, 0x70, 0x1a, 0xf1, 0xfa, 0x2c, 0x64, 0x9c, 0x41, 0x4b,
	0xc4, 0xe5, 0xd2, 0x88, 0x8d, 0x98, 0x4c, 0x34, 0x44, 0xa4, 0x6a, 0xe5, 0xea, 0x88, 0xb1, 0x51,
	0x40, 0x1b, 0x12, 0x0d, 0xe6, 0x1f, 0x1a, 0x7c, 0x3c, 0xa1, 0x11, 0xf7, 0x27, 0xb3, 0x35, 0xa1,
	0xb2, 0x4b, 0xf8, 0x18, 0xfa, 0xb3, 0x19, 0x0d, 0x23, 0x55, 0xaf, 0x7d, 0x4d, 0x83, 0x6c, 0x97,
	0x46, 0x9c, 0x0e, 0xe1, 0x11, 0x30, 0x7b, 0x3c, 0x44, 0x06, 0x36, 0x9c, 0x02, 0x11, 0x21, 0x7c,
	0xa4, 0x6b, 0x28, 0x8d, 0x4d, 0xa7, 0xd8, 0x84, 0x75, 0x69, 0x4b, 0xe5, 0xde, 0xd2, 0x4b, 0x1a,
	0x34, 0x89, 0x56, 0xb7, 0x40, 0x4e, 0x45, 0x3d, 0x64, 0x4a, 0xf2, 0xfd, 0x24, 0x79, 0xfd, 0xd3,
	0x7b, 0x31, 0xe5, 0xe1, 0x82, 0x68, 0x66, 0x2c, 0xea, 0x20, 0x6b, 0xaf, 0xa8, 0xb3, 0x25, 0xea,
	0x94, 0xcf, 0x81, 0x9d, 0xec, 0x26, 0x7c, 0x5f, 0xd0, 0x85, 0xf6, 0x7d, 0x41, 0x17, 0xb0, 0x04,
	0x32, 0x97, 0x7e, 0x30, 0xa7, 0x28, 0x2d, 0x73, 0x0a, 0x9c, 0xa7, 0x9f, 0x1a, 0xe5, 0xae, 0xd6,
	0x76, 0xf6, 0x69, 0x9d, 0xa4, 0xf6, 0xe6, 0x27, 0xc7, 0xfd, 0x6a, 0x58, 0xf7, 0x53, 0xa5, 0xeb,
	0x33, 0xac, 0x7d, 0xca, 0x01, 0xab, 0x4f, 0x23, 0x7e, 0xc3, 0x78, 0x4b, 0x20, 0xf3, 0x66, 0xca,
	0x5b, 0x4d, 0xf9, 0xa9, 0x0c, 0x51, 0x60, 0x9d, 0x7d, 0x72, 0x86, 0x4c, 0x6c, 0x38, 0x26, 0x51,
	0x40, 0x64, 0x5f, 0x06, 0xcc, 0xe7, 0xc8, 0xc2, 0x86, 0x93, 0x26, 0x0a, 0xc0, 0xbb, 0x20, 0xdb,
	0x66, 0xf3, 0x41, 0x40, 0x51, 0x06, 0x1b, 0x8e, 0x41, 0xd6, 0x08, 0x42, 0x60, 0x79, 0x8c, 0x05,
	0x28, 0x8b, 0x0d, 0x27, 0x4f, 0x64, 0x2c, 0x3a, 0x78, 0x0b, 0x4e, 0x23, 0x94, 0xc3, 0x86, 0x63,
	0x13, 0x05, 0xa0, 0x07, 0x0a, 0x7d, 0xbd, 0x32, 0x28, 0x2f, 0x9f, 0x5c, 0xae, 0xab, 0x9d, 0xa9,
	0xeb, 0x9d, 0xa9, 0x6f, 0x18, 0x5e, 0x7e, 0xb9, 0xaa, 0xa6, 0x3e, 0xff, 0xa8, 0x1a, 0x24, 0x96,
	0xc1, 0x13, 0x50, 0x6c, 0xcf, 0x43, 0x9f, 0x8f, 0xd9, 0xb4, 0xc7, 0x87, 0xa8, 0x20, 0x7c, 0x7b,
	0xd6, 0x17, 0xc1, 0x4a, 0x16, 0xe0, 0x19, 0x38, 0xd0, 0xf0, 0xf9, 0x3c, 0xe2, 0x6c, 0x82, 0x80,
	0xa4, 0xda, 0xbf, 0x56, 0xd5, 0xbc, 0xae, 0x90, 0x1d, 0x0e, 0x6c, 0x03, 0xb0, 0xf9, 0x54, 0x17,
	0x15, 0xff, 0xc9, 0xa2, 0x21, 0x2d, 0x26, 0x74, 0x10, 0x81, 0x5c, 0x8f, 0x87, 0xe3, 0xe9, 0xc8,
	0x45, 0xb7, 0xb0, 0xe9, 0x14, 0x88, 0x86, 0xf0, 0x21, 0xc8, 0x88, 0xf9, 0xb8, 0xe8, 0x00, 0x9b,
	0x4e, 0xde, 0x3b, 0xfe, 0xbe, 0xaa, 0x1e, 0x8a, 0x84, 0xfa, 0xbc, 0x1b, 0x86, 0xfe, 0x82, 0x28,
	0x86, 0x18, 0xb7, 0x9c, 0x9a, 0x8b, 0x0e, 0xb1, 0xe9, 0xd8, 0x64, 0x8d, 0xe0, 0xb3, 0x84, 0x45,
	0x17, 0x1d, 0xc9, 0x4d, 0xfe, 0x93, 0x45, 0x6b, 0xc7, 0x9e, 0x0b, 0x1f, 0x03, 0xfb, 0x55, 0xe8,
	0xbf, 0xa7, 0xef, 0x68, 0x38, 0x66, 0x43, 0x17, 0xdd, 0xc6, 0xe6, 0xb5, 0xc1, 0x6c, 0x31, 0xe0,
	0x83, 0xcd, 0x6d, 0x42, 0x39, 0x12, 0x3b, 0xb9, 0xa8, 0x9b, 0xab, 0x3c, 0xd1, 0x07, 0xe6, 0xa2,
	0x63, 0x69, 0x6b, 0x9b, 0xa6, 0x8b, 0xf0, 0x34, 0xbe, 0xde, 0x92, 0xe4, 0xdd, 0x53, 0xbc, 0x7e,
	0x4c, 0xde, 0xbd, 0xdd, 0xd3, 0xf8, 0x76, 0xef, 0xec, 0x91, 0xfc, 0xcf, 0xcb, 0x7d, 0xfd, 0xd7,
	0xcb, 0xad, 0x6d, 0x5f, 0xee, 0xf6, 0x4b, 0xe3, 0x4e, 0x9e, 0xbd, 0xfc, 0x59, 0x49, 0x2d, 0xaf,
	0x2a, 0xa9, 0x6f, 0x57, 0x95, 0xd4, 0x20, 0x2b, 0xff, 0x9f, 0xd6, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x88, 0x11, 0x6a, 0x5b, 0x72, 0x05, 0x00, 0x00,
}
