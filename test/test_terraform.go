/*
Copyright 2015-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package test

import (
	"context"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	types "github.com/hashicorp/terraform-plugin-framework/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// GenSchemaTest returns tfsdk.Schema definition for Test
func GenSchemaTest(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{Attributes: map[string]tfsdk.Attribute{
		"bool": {
			Description: "Bool bool field",
			Optional:    true,
			Type:        types.BoolType,
		},
		"bool_custom_list": GenSchemaBoolCustom(ctx),
		"bytes": {
			Description: "bytes byte[] field",
			Optional:    true,
			Type:        types.StringType,
		},
		"bytes_list": {
			Description: "BytesList [][]byte field",
			Optional:    true,
			Type:        types.ListType{ElemType: types.StringType},
		},
		"double": {
			Description: "Double double field",
			Optional:    true,
			Type:        types.Float64Type,
		},
		"duration_custom": {
			Description: "DurationCustom time.Duration field (with casttype)",
			Optional:    true,
			Type:        DurationType{},
		},
		"duration_custom_list": {
			Description: "DurationCustomList []time.Duration field",
			Optional:    true,
			Type:        types.ListType{ElemType: DurationType{}},
		},
		"duration_custom_missing": {
			Description: "DurationCustomMissing time.Duration field (with casttype) missing in input data",
			Optional:    true,
			Type:        DurationType{},
		},
		"duration_standard": {
			Description: "DurationStandard time.Duration field (standard)",
			Optional:    true,
			Type:        DurationType{},
		},
		"duration_standard_missing": {
			Description: "DurationStandardMissing time.Duration field (standard) missing in input data",
			Optional:    true,
			Type:        DurationType{},
		},
		"float": {
			Description: "Float float field",
			Optional:    true,
			Type:        types.Float64Type,
		},
		"id": {
			Computed: true,
			Optional: false,
			Required: false,
			Type:     types.StringType,
		},
		"int32": {
			Description: "Int32 int32 field",
			Optional:    true,
			Type:        types.Int64Type,
		},
		"int64": {
			Description: "Int64 int64 field",
			Optional:    true,
			Type:        types.Int64Type,
		},
		"map": {
			Description: "Map normal map",
			Optional:    true,
			Type:        types.MapType{ElemType: types.StringType},
		},
		"map_object": {
			Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.MapNestedAttributesOptions{}),
			Description: "MapObject is the object map",
			Optional:    true,
		},
		"map_object_nullable": {
			Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.MapNestedAttributesOptions{}),
			Description: "MapObjectNullable is the object map with nullable values",
			Optional:    true,
		},
		"nested": {
			Attributes: tfsdk.SingleNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}),
			Description: "Nested nested message field, non-nullable",
			Optional:    true,
		},
		"nested_list": {
			Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.ListNestedAttributesOptions{}),
			Description: "NestedList nested message array",
			Optional:    true,
		},
		"nested_list_nullable": {
			Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.ListNestedAttributesOptions{}),
			Description: "NestedListNullable nested message array",
			Optional:    true,
		},
		"nested_nullable": {
			Attributes: tfsdk.SingleNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}),
			Description: "NestedNullable nested message field, nullabel",
			Optional:    true,
		},
		"nested_nullable_with_nil_value": {
			Attributes: tfsdk.SingleNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}),
			Description: "NestedNullableWithNilValue nested message field, with no value set",
			Optional:    true,
		},
		"str": {
			Description:   "Str string field",
			Optional:      true,
			PlanModifiers: []tfsdk.AttributePlanModifier{tfsdk.UseStateForUnknown()},
			Type:          types.StringType,
		},
		"string_list": {
			Description: "StringList []string field",
			Optional:    true,
			Type:        types.ListType{ElemType: types.StringType},
		},
		"string_list_empty": {
			Description: "StringListEmpty []string field",
			Optional:    true,
			Type:        types.ListType{ElemType: types.StringType},
		},
		"timestamp": {
			Description: "Timestamp time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
		"timestamp_list": {
			Description: "TimestampList []time.Time field",
			Optional:    true,
			Type:        types.ListType{ElemType: TimeType{}},
		},
		"timestamp_missing": {
			Description: "Timestamp time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
		"timestamp_nullable": {
			Description: "TimestampNullable *time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
		"timestamp_nullable_with_nil_value": {
			Description: "TimestampNullableWithNilValue *time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
	}}, nil
}

// CopyTestFromTerraform copies contents of the source Terraform object into a target struct
func CopyTestFromTerraform(tf types.Object, obj *Test) diag.Diagnostics {
	var diags diag.Diagnostics
	{
		a, ok := tf.Attrs["str"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Str is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.String)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Str can not be converted to types.String")
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Str = t
			}
		}
	}
	{
		a, ok := tf.Attrs["int32"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Int32 is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Int64)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Int32 can not be converted to types.Int64")
			} else {
				var t int32
				if !v.Null && !v.Unknown {
					t = int32(v.Value)
				}
				obj.Int32 = t
			}
		}
	}
	{
		a, ok := tf.Attrs["int64"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Int64 is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Int64)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Int64 can not be converted to types.Int64")
			} else {
				var t int64
				if !v.Null && !v.Unknown {
					t = int64(v.Value)
				}
				obj.Int64 = t
			}
		}
	}
	{
		a, ok := tf.Attrs["float"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Float is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Float64)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Float can not be converted to types.Float64")
			} else {
				var t float32
				if !v.Null && !v.Unknown {
					t = float32(v.Value)
				}
				obj.Float = t
			}
		}
	}
	{
		a, ok := tf.Attrs["double"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Double is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Float64)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Double can not be converted to types.Float64")
			} else {
				var t float64
				if !v.Null && !v.Unknown {
					t = float64(v.Value)
				}
				obj.Double = t
			}
		}
	}
	{
		a, ok := tf.Attrs["bool"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Bool is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Bool)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Bool can not be converted to types.Bool")
			} else {
				var t bool
				if !v.Null && !v.Unknown {
					t = bool(v.Value)
				}
				obj.Bool = t
			}
		}
	}
	{
		a, ok := tf.Attrs["bytes"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.bytes is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.String)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.bytes can not be converted to types.String")
			} else {
				var t []byte
				if !v.Null && !v.Unknown {
					t = []byte(v.Value)
				}
				obj.Bytes = t
			}
		}
	}
	{
		a, ok := tf.Attrs["timestamp"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Timestamp is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(TimeValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Timestamp can not be converted to TimeValue")
			} else {
				var t time.Time
				if !v.Null && !v.Unknown {
					t = time.Time(v.Value)
				}
				obj.Timestamp = t
			}
		}
	}
	{
		a, ok := tf.Attrs["timestamp_missing"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.TimestampMissing is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(TimeValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.TimestampMissing can not be converted to TimeValue")
			} else {
				var t time.Time
				if !v.Null && !v.Unknown {
					t = time.Time(v.Value)
				}
				obj.TimestampMissing = t
			}
		}
	}
	{
		a, ok := tf.Attrs["timestamp_nullable"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.TimestampNullable is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(TimeValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.TimestampNullable can not be converted to TimeValue")
			} else {
				var t *time.Time
				if !v.Null && !v.Unknown {
					c := time.Time(v.Value)
					t = &c
				}
				obj.TimestampNullable = t
			}
		}
	}
	{
		a, ok := tf.Attrs["timestamp_nullable_with_nil_value"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.TimestampNullableWithNilValue is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(TimeValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.TimestampNullableWithNilValue can not be converted to TimeValue")
			} else {
				var t *time.Time
				if !v.Null && !v.Unknown {
					c := time.Time(v.Value)
					t = &c
				}
				obj.TimestampNullableWithNilValue = t
			}
		}
	}
	{
		a, ok := tf.Attrs["duration_standard"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.DurationStandard is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(DurationValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.DurationStandard can not be converted to DurationValue")
			} else {
				var t time.Duration
				if !v.Null && !v.Unknown {
					t = time.Duration(v.Value)
				}
				obj.DurationStandard = t
			}
		}
	}
	{
		a, ok := tf.Attrs["duration_standard_missing"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.DurationStandardMissing is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(DurationValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.DurationStandardMissing can not be converted to DurationValue")
			} else {
				var t time.Duration
				if !v.Null && !v.Unknown {
					t = time.Duration(v.Value)
				}
				obj.DurationStandardMissing = t
			}
		}
	}
	{
		a, ok := tf.Attrs["duration_custom"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.DurationCustom is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(DurationValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.DurationCustom can not be converted to DurationValue")
			} else {
				var t Duration
				if !v.Null && !v.Unknown {
					t = Duration(v.Value)
				}
				obj.DurationCustom = t
			}
		}
	}
	{
		a, ok := tf.Attrs["duration_custom_missing"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.DurationCustomMissing is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(DurationValue)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.DurationCustomMissing can not be converted to DurationValue")
			} else {
				var t Duration
				if !v.Null && !v.Unknown {
					t = Duration(v.Value)
				}
				obj.DurationCustomMissing = t
			}
		}
	}
	{
		a, ok := tf.Attrs["string_list"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.StringList is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.StringList can not be converted to types.List")
			} else {
				obj.StringList = make([]string, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.StringList can not be converted to types.String")
						} else {
							var t string
							if !v.Null && !v.Unknown {
								t = string(v.Value)
							}
							obj.StringList[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["string_list_empty"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.StringListEmpty is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.StringListEmpty can not be converted to types.List")
			} else {
				obj.StringListEmpty = make([]string, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.StringListEmpty can not be converted to types.String")
						} else {
							var t string
							if !v.Null && !v.Unknown {
								t = string(v.Value)
							}
							obj.StringListEmpty[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["bool_custom_list"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.BoolCustomList is missing in Terraform object Attrs")
		}
		CopyFromBoolCustom(diags, a, &obj.BoolCustomList)
	}
	{
		a, ok := tf.Attrs["bytes_list"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.BytesList is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.BytesList can not be converted to types.List")
			} else {
				obj.BytesList = make([][]byte, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.BytesList can not be converted to types.String")
						} else {
							var t []byte
							if !v.Null && !v.Unknown {
								t = []byte(v.Value)
							}
							obj.BytesList[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["timestamp_list"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.TimestampList is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.TimestampList can not be converted to types.List")
			} else {
				obj.TimestampList = make([]*time.Time, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(TimeValue)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.TimestampList can not be converted to TimeValue")
						} else {
							var t *time.Time
							if !v.Null && !v.Unknown {
								c := time.Time(v.Value)
								t = &c
							}
							obj.TimestampList[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["duration_custom_list"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.DurationCustomList is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.DurationCustomList can not be converted to types.List")
			} else {
				obj.DurationCustomList = make([]Duration, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(DurationValue)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.DurationCustomList can not be converted to DurationValue")
						} else {
							var t Duration
							if !v.Null && !v.Unknown {
								t = Duration(v.Value)
							}
							obj.DurationCustomList[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Nested is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Nested can not be converted to types.Object")
			} else {
				obj.Nested = Nested{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Nested
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.Nested.Str is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.String)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.Nested.Str can not be converted to types.String")
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Str = t
							}
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.Nested.NestedList is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.List)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.Nested.NestedList can not be converted to types.List")
							} else {
								obj.NestedList = make([]*OtherNested, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.Object)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.Nested.NestedList can not be converted to types.Object")
										} else {
											var t *OtherNested
											if !v.Null && !v.Unknown {
												tf := v
												t = &OtherNested{}
												obj := t
												{
													a, ok := tf.Attrs["str"]
													if !ok {
														diags.AddError("Error reading value from Terraform", "A value for Test.Nested.NestedList.Str is missing in the source Terraform object Attrs")
													} else {
														v, ok := a.(types.String)
														if !ok {
															diags.AddError("Error reading value from Terraform", "A value for Test.Nested.NestedList.Str can not be converted to types.String")
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Str = t
														}
													}
												}
											}
											obj.NestedList[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.Nested.Map is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.Map)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.Nested.Map can not be converted to types.Map")
							} else {
								obj.Map = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.Nested.Map can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Map[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.Nested.MapObjectNested is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.Map)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.Nested.MapObjectNested can not be converted to types.Map")
							} else {
								obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.Object)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.Nested.MapObjectNested can not be converted to types.Object")
										} else {
											var t OtherNested
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["str"]
													if !ok {
														diags.AddError("Error reading value from Terraform", "A value for Test.Nested.MapObjectNested.Str is missing in the source Terraform object Attrs")
													} else {
														v, ok := a.(types.String)
														if !ok {
															diags.AddError("Error reading value from Terraform", "A value for Test.Nested.MapObjectNested.Str can not be converted to types.String")
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Str = t
														}
													}
												}
											}
											obj.MapObjectNested[k] = t
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_nullable"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable can not be converted to types.Object")
			} else {
				obj.NestedNullable = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.NestedNullable = &Nested{}
					obj := obj.NestedNullable
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.Str is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.String)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.Str can not be converted to types.String")
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Str = t
							}
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.NestedList is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.List)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.NestedList can not be converted to types.List")
							} else {
								obj.NestedList = make([]*OtherNested, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.Object)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.NestedNullable.NestedList can not be converted to types.Object")
										} else {
											var t *OtherNested
											if !v.Null && !v.Unknown {
												tf := v
												t = &OtherNested{}
												obj := t
												{
													a, ok := tf.Attrs["str"]
													if !ok {
														diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.NestedList.Str is missing in the source Terraform object Attrs")
													} else {
														v, ok := a.(types.String)
														if !ok {
															diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.NestedList.Str can not be converted to types.String")
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Str = t
														}
													}
												}
											}
											obj.NestedList[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.Map is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.Map)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.Map can not be converted to types.Map")
							} else {
								obj.Map = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.NestedNullable.Map can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Map[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.MapObjectNested is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.Map)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.MapObjectNested can not be converted to types.Map")
							} else {
								obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.Object)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.NestedNullable.MapObjectNested can not be converted to types.Object")
										} else {
											var t OtherNested
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["str"]
													if !ok {
														diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.MapObjectNested.Str is missing in the source Terraform object Attrs")
													} else {
														v, ok := a.(types.String)
														if !ok {
															diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullable.MapObjectNested.Str can not be converted to types.String")
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Str = t
														}
													}
												}
											}
											obj.MapObjectNested[k] = t
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_nullable_with_nil_value"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Object)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue can not be converted to types.Object")
			} else {
				obj.NestedNullableWithNilValue = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.NestedNullableWithNilValue = &Nested{}
					obj := obj.NestedNullableWithNilValue
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.Str is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.String)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.Str can not be converted to types.String")
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Str = t
							}
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.NestedList is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.List)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.NestedList can not be converted to types.List")
							} else {
								obj.NestedList = make([]*OtherNested, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.Object)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.NestedNullableWithNilValue.NestedList can not be converted to types.Object")
										} else {
											var t *OtherNested
											if !v.Null && !v.Unknown {
												tf := v
												t = &OtherNested{}
												obj := t
												{
													a, ok := tf.Attrs["str"]
													if !ok {
														diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.NestedList.Str is missing in the source Terraform object Attrs")
													} else {
														v, ok := a.(types.String)
														if !ok {
															diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.NestedList.Str can not be converted to types.String")
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Str = t
														}
													}
												}
											}
											obj.NestedList[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.Map is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.Map)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.Map can not be converted to types.Map")
							} else {
								obj.Map = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.NestedNullableWithNilValue.Map can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Map[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.MapObjectNested is missing in the source Terraform object Attrs")
						} else {
							v, ok := a.(types.Map)
							if !ok {
								diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.MapObjectNested can not be converted to types.Map")
							} else {
								obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(types.Object)
										if !ok {
											diags.AddError("Error reading value from Terraform", "An element value for Test.NestedNullableWithNilValue.MapObjectNested can not be converted to types.Object")
										} else {
											var t OtherNested
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["str"]
													if !ok {
														diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.MapObjectNested.Str is missing in the source Terraform object Attrs")
													} else {
														v, ok := a.(types.String)
														if !ok {
															diags.AddError("Error reading value from Terraform", "A value for Test.NestedNullableWithNilValue.MapObjectNested.Str can not be converted to types.String")
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Str = t
														}
													}
												}
											}
											obj.MapObjectNested[k] = t
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_list"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.NestedList is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.NestedList can not be converted to types.List")
			} else {
				obj.NestedList = make([]Nested, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.NestedList can not be converted to types.Object")
						} else {
							var t Nested
							if !v.Null && !v.Unknown {
								tf := v
								obj := &t
								{
									a, ok := tf.Attrs["str"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.Str is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.Str can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Str = t
										}
									}
								}
								{
									a, ok := tf.Attrs["nested_list"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.NestedList is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.List)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.NestedList can not be converted to types.List")
										} else {
											obj.NestedList = make([]*OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.NestedList.NestedList can not be converted to types.Object")
													} else {
														var t *OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															t = &OtherNested{}
															obj := t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.NestedList.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.NestedList.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.NestedList[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.Map is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.Map can not be converted to types.Map")
										} else {
											obj.Map = make(map[string]string, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.String)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.NestedList.Map can not be converted to types.String")
													} else {
														var t string
														if !v.Null && !v.Unknown {
															t = string(v.Value)
														}
														obj.Map[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map_object_nested"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.MapObjectNested is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.MapObjectNested can not be converted to types.Map")
										} else {
											obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.NestedList.MapObjectNested can not be converted to types.Object")
													} else {
														var t OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															obj := &t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.MapObjectNested.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.NestedList.MapObjectNested.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.MapObjectNested[k] = t
													}
												}
											}
										}
									}
								}
							}
							obj.NestedList[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_list_nullable"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.List)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable can not be converted to types.List")
			} else {
				obj.NestedListNullable = make([]*Nested, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.NestedListNullable can not be converted to types.Object")
						} else {
							var t *Nested
							if !v.Null && !v.Unknown {
								tf := v
								t = &Nested{}
								obj := t
								{
									a, ok := tf.Attrs["str"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.Str is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.Str can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Str = t
										}
									}
								}
								{
									a, ok := tf.Attrs["nested_list"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.NestedList is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.List)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.NestedList can not be converted to types.List")
										} else {
											obj.NestedList = make([]*OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.NestedListNullable.NestedList can not be converted to types.Object")
													} else {
														var t *OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															t = &OtherNested{}
															obj := t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.NestedList.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.NestedList.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.NestedList[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.Map is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.Map can not be converted to types.Map")
										} else {
											obj.Map = make(map[string]string, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.String)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.NestedListNullable.Map can not be converted to types.String")
													} else {
														var t string
														if !v.Null && !v.Unknown {
															t = string(v.Value)
														}
														obj.Map[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map_object_nested"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.MapObjectNested is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.MapObjectNested can not be converted to types.Map")
										} else {
											obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.NestedListNullable.MapObjectNested can not be converted to types.Object")
													} else {
														var t OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															obj := &t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.MapObjectNested.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.NestedListNullable.MapObjectNested.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.MapObjectNested[k] = t
													}
												}
											}
										}
									}
								}
							}
							obj.NestedListNullable[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["map"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.Map is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Map)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.Map can not be converted to types.Map")
			} else {
				obj.Map = make(map[string]string, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.Map can not be converted to types.String")
						} else {
							var t string
							if !v.Null && !v.Unknown {
								t = string(v.Value)
							}
							obj.Map[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["map_object"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.MapObject is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Map)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.MapObject can not be converted to types.Map")
			} else {
				obj.MapObject = make(map[string]Nested, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.MapObject can not be converted to types.Object")
						} else {
							var t Nested
							if !v.Null && !v.Unknown {
								tf := v
								obj := &t
								{
									a, ok := tf.Attrs["str"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.Str is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.Str can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Str = t
										}
									}
								}
								{
									a, ok := tf.Attrs["nested_list"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.NestedList is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.List)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.NestedList can not be converted to types.List")
										} else {
											obj.NestedList = make([]*OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.MapObject.NestedList can not be converted to types.Object")
													} else {
														var t *OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															t = &OtherNested{}
															obj := t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.NestedList.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.NestedList.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.NestedList[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.Map is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.Map can not be converted to types.Map")
										} else {
											obj.Map = make(map[string]string, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.String)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.MapObject.Map can not be converted to types.String")
													} else {
														var t string
														if !v.Null && !v.Unknown {
															t = string(v.Value)
														}
														obj.Map[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map_object_nested"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.MapObjectNested is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.MapObjectNested can not be converted to types.Map")
										} else {
											obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.MapObject.MapObjectNested can not be converted to types.Object")
													} else {
														var t OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															obj := &t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.MapObjectNested.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.MapObject.MapObjectNested.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.MapObjectNested[k] = t
													}
												}
											}
										}
									}
								}
							}
							obj.MapObject[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["map_object_nullable"]
		if !ok {
			diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable is missing in the source Terraform object Attrs")
		} else {
			v, ok := a.(types.Map)
			if !ok {
				diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable can not be converted to types.Map")
			} else {
				obj.MapObjectNullable = make(map[string]*Nested, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							diags.AddError("Error reading value from Terraform", "An element value for Test.MapObjectNullable can not be converted to types.Object")
						} else {
							var t *Nested
							if !v.Null && !v.Unknown {
								tf := v
								t = &Nested{}
								obj := t
								{
									a, ok := tf.Attrs["str"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.Str is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.String)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.Str can not be converted to types.String")
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Str = t
										}
									}
								}
								{
									a, ok := tf.Attrs["nested_list"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.NestedList is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.List)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.NestedList can not be converted to types.List")
										} else {
											obj.NestedList = make([]*OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.MapObjectNullable.NestedList can not be converted to types.Object")
													} else {
														var t *OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															t = &OtherNested{}
															obj := t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.NestedList.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.NestedList.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.NestedList[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.Map is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.Map can not be converted to types.Map")
										} else {
											obj.Map = make(map[string]string, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.String)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.MapObjectNullable.Map can not be converted to types.String")
													} else {
														var t string
														if !v.Null && !v.Unknown {
															t = string(v.Value)
														}
														obj.Map[k] = t
													}
												}
											}
										}
									}
								}
								{
									a, ok := tf.Attrs["map_object_nested"]
									if !ok {
										diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.MapObjectNested is missing in the source Terraform object Attrs")
									} else {
										v, ok := a.(types.Map)
										if !ok {
											diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.MapObjectNested can not be converted to types.Map")
										} else {
											obj.MapObjectNested = make(map[string]OtherNested, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(types.Object)
													if !ok {
														diags.AddError("Error reading value from Terraform", "An element value for Test.MapObjectNullable.MapObjectNested can not be converted to types.Object")
													} else {
														var t OtherNested
														if !v.Null && !v.Unknown {
															tf := v
															obj := &t
															{
																a, ok := tf.Attrs["str"]
																if !ok {
																	diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.MapObjectNested.Str is missing in the source Terraform object Attrs")
																} else {
																	v, ok := a.(types.String)
																	if !ok {
																		diags.AddError("Error reading value from Terraform", "A value for Test.MapObjectNullable.MapObjectNested.Str can not be converted to types.String")
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Str = t
																	}
																}
															}
														}
														obj.MapObjectNested[k] = t
													}
												}
											}
										}
									}
								}
							}
							obj.MapObjectNullable[k] = t
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyTestToTerraform copies contents of the source Terraform object into a target struct
func CopyTestToTerraform(obj Test, tf *types.Object) diag.Diagnostics {
	var diags diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]attr.Value)
	}
	{
		_, ok := tf.AttrTypes["str"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Str is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["str"].(types.String)
			if !ok {
				v = types.String{}
			}
			v.Value = string(obj.Str)
			v.Unknown = false
			tf.Attrs["str"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["int32"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Int32 is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["int32"].(types.Int64)
			if !ok {
				v = types.Int64{}
			}
			v.Value = int64(obj.Int32)
			v.Unknown = false
			tf.Attrs["int32"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["int64"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Int64 is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["int64"].(types.Int64)
			if !ok {
				v = types.Int64{}
			}
			v.Value = int64(obj.Int64)
			v.Unknown = false
			tf.Attrs["int64"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["float"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Float is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["float"].(types.Float64)
			if !ok {
				v = types.Float64{}
			}
			v.Value = float64(obj.Float)
			v.Unknown = false
			tf.Attrs["float"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["double"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Double is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["double"].(types.Float64)
			if !ok {
				v = types.Float64{}
			}
			v.Value = float64(obj.Double)
			v.Unknown = false
			tf.Attrs["double"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["bool"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Bool is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["bool"].(types.Bool)
			if !ok {
				v = types.Bool{}
			}
			v.Value = bool(obj.Bool)
			v.Unknown = false
			tf.Attrs["bool"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["bytes"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.bytes is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["bytes"].(types.String)
			if !ok {
				v = types.String{}
			}
			v.Value = string(obj.Bytes)
			v.Unknown = false
			tf.Attrs["bytes"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["timestamp"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Timestamp is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["timestamp"].(TimeValue)
			if !ok {
				v = TimeValue{}
			}
			v.Value = time.Time(obj.Timestamp)
			v.Unknown = false
			tf.Attrs["timestamp"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["timestamp_missing"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.TimestampMissing is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["timestamp_missing"].(TimeValue)
			if !ok {
				v = TimeValue{}
			}
			v.Value = time.Time(obj.TimestampMissing)
			v.Unknown = false
			tf.Attrs["timestamp_missing"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["timestamp_nullable"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.TimestampNullable is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["timestamp_nullable"].(TimeValue)
			if !ok {
				v = TimeValue{}
			}
			if obj.TimestampNullable == nil {
				v.Null = true
			} else {
				v.Value = time.Time(*obj.TimestampNullable)
			}
			v.Unknown = false
			tf.Attrs["timestamp_nullable"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["timestamp_nullable_with_nil_value"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.TimestampNullableWithNilValue is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["timestamp_nullable_with_nil_value"].(TimeValue)
			if !ok {
				v = TimeValue{}
			}
			if obj.TimestampNullableWithNilValue == nil {
				v.Null = true
			} else {
				v.Value = time.Time(*obj.TimestampNullableWithNilValue)
			}
			v.Unknown = false
			tf.Attrs["timestamp_nullable_with_nil_value"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["duration_standard"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.DurationStandard is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["duration_standard"].(DurationValue)
			if !ok {
				v = DurationValue{}
			}
			v.Value = time.Duration(obj.DurationStandard)
			v.Unknown = false
			tf.Attrs["duration_standard"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["duration_standard_missing"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.DurationStandardMissing is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["duration_standard_missing"].(DurationValue)
			if !ok {
				v = DurationValue{}
			}
			v.Value = time.Duration(obj.DurationStandardMissing)
			v.Unknown = false
			tf.Attrs["duration_standard_missing"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["duration_custom"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.DurationCustom is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["duration_custom"].(DurationValue)
			if !ok {
				v = DurationValue{}
			}
			v.Value = time.Duration(obj.DurationCustom)
			v.Unknown = false
			tf.Attrs["duration_custom"] = v
		}
	}
	{
		_, ok := tf.AttrTypes["duration_custom_missing"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.DurationCustomMissing is missing in the target Terraform object AttrTypes")
		} else {
			v, ok := tf.Attrs["duration_custom_missing"].(DurationValue)
			if !ok {
				v = DurationValue{}
			}
			v.Value = time.Duration(obj.DurationCustomMissing)
			v.Unknown = false
			tf.Attrs["duration_custom_missing"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["string_list"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.StringList is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.StringList can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["string_list"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.StringList)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.StringList))
					}
				}
				if obj.StringList != nil {
					for k, a := range obj.StringList {
						v, ok := tf.Attrs["string_list"].(types.String)
						if !ok {
							v = types.String{}
						}
						v.Value = string(a)
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["string_list"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["string_list_empty"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.StringListEmpty is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.StringListEmpty can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["string_list_empty"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.StringListEmpty)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.StringListEmpty))
					}
				}
				if obj.StringListEmpty != nil {
					for k, a := range obj.StringListEmpty {
						v, ok := tf.Attrs["string_list_empty"].(types.String)
						if !ok {
							v = types.String{}
						}
						v.Value = string(a)
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["string_list_empty"] = c
			}
		}
	}
	{
		_, ok := tf.AttrTypes["bool_custom_list"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.BoolCustomList is missing in the target Terraform object AttrTypes")
		} else {
			v := CopyToBoolCustom(diags, obj.BoolCustomList)
			tf.Attrs["bool_custom_list"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["bytes_list"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.BytesList is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.BytesList can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["bytes_list"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.BytesList)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.BytesList))
					}
				}
				if obj.BytesList != nil {
					for k, a := range obj.BytesList {
						v, ok := tf.Attrs["bytes_list"].(types.String)
						if !ok {
							v = types.String{}
						}
						v.Value = string(a)
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["bytes_list"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["timestamp_list"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.TimestampList is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.TimestampList can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["timestamp_list"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.TimestampList)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.TimestampList))
					}
				}
				if obj.TimestampList != nil {
					for k, a := range obj.TimestampList {
						v, ok := tf.Attrs["timestamp_list"].(TimeValue)
						if !ok {
							v = TimeValue{}
						}
						if a == nil {
							v.Null = true
						} else {
							v.Value = time.Time(*a)
						}
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["timestamp_list"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["duration_custom_list"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.DurationCustomList is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.DurationCustomList can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["duration_custom_list"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.DurationCustomList)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.DurationCustomList))
					}
				}
				if obj.DurationCustomList != nil {
					for k, a := range obj.DurationCustomList {
						v, ok := tf.Attrs["duration_custom_list"].(DurationValue)
						if !ok {
							v = DurationValue{}
						}
						v.Value = time.Duration(a)
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["duration_custom_list"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["nested"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Nested is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ObjectType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.Nested can not be converted to types.ObjectType")
			} else {
				v, ok := tf.Attrs["nested"].(types.Object)
				if !ok {
					v = types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Nested
					tf := &v
					{
						_, ok := tf.AttrTypes["str"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.Nested.Str is missing in the target Terraform object AttrTypes")
						} else {
							v, ok := tf.Attrs["str"].(types.String)
							if !ok {
								v = types.String{}
							}
							v.Value = string(obj.Str)
							v.Unknown = false
							tf.Attrs["str"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["nested_list"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.Nested.NestedList is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.ListType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.Nested.NestedList can not be converted to types.ListType")
							} else {
								c, ok := tf.Attrs["nested_list"].(types.List)
								if !ok {
									c = types.List{

										ElemType: o.ElemType,
										Elems:    make([]attr.Value, len(obj.NestedList)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]attr.Value, len(obj.NestedList))
									}
								}
								if obj.NestedList != nil {
									o := o.ElemType.(types.ObjectType)
									for k, a := range obj.NestedList {
										v, ok := tf.Attrs["nested_list"].(types.Object)
										if !ok {
											v = types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
											}
										}
										if a == nil {
											v.Null = true
										} else {
											obj := a
											tf := &v
											{
												_, ok := tf.AttrTypes["str"]
												if !ok {
													diags.AddError("Error writing value to Terraform", "A value type for Test.Nested.NestedList.Str is missing in the target Terraform object AttrTypes")
												} else {
													v, ok := tf.Attrs["str"].(types.String)
													if !ok {
														v = types.String{}
													}
													v.Value = string(obj.Str)
													v.Unknown = false
													tf.Attrs["str"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["nested_list"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["map"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.Nested.Map is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.MapType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.Nested.Map can not be converted to types.MapType")
							} else {
								c, ok := tf.Attrs["map"].(types.Map)
								if !ok {
									c = types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]attr.Value, len(obj.Map)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]attr.Value, len(obj.Map))
									}
								}
								if obj.Map != nil {
									for k, a := range obj.Map {
										v, ok := tf.Attrs["map"].(types.String)
										if !ok {
											v = types.String{}
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["map"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["map_object_nested"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.Nested.MapObjectNested is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.MapType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.Nested.MapObjectNested can not be converted to types.MapType")
							} else {
								c, ok := tf.Attrs["map_object_nested"].(types.Map)
								if !ok {
									c = types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
									}
								}
								if obj.MapObjectNested != nil {
									o := o.ElemType.(types.ObjectType)
									for k, a := range obj.MapObjectNested {
										v, ok := tf.Attrs["map_object_nested"].(types.Object)
										if !ok {
											v = types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												_, ok := tf.AttrTypes["str"]
												if !ok {
													diags.AddError("Error writing value to Terraform", "A value type for Test.Nested.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
												} else {
													v, ok := tf.Attrs["str"].(types.String)
													if !ok {
														v = types.String{}
													}
													v.Value = string(obj.Str)
													v.Unknown = false
													tf.Attrs["str"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["map_object_nested"] = c
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["nested"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["nested_nullable"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ObjectType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullable can not be converted to types.ObjectType")
			} else {
				v, ok := tf.Attrs["nested_nullable"].(types.Object)
				if !ok {
					v = types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.NestedNullable == nil {
					v.Null = true
				} else {
					obj := obj.NestedNullable
					tf := &v
					{
						_, ok := tf.AttrTypes["str"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable.Str is missing in the target Terraform object AttrTypes")
						} else {
							v, ok := tf.Attrs["str"].(types.String)
							if !ok {
								v = types.String{}
							}
							v.Value = string(obj.Str)
							v.Unknown = false
							tf.Attrs["str"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["nested_list"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable.NestedList is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.ListType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullable.NestedList can not be converted to types.ListType")
							} else {
								c, ok := tf.Attrs["nested_list"].(types.List)
								if !ok {
									c = types.List{

										ElemType: o.ElemType,
										Elems:    make([]attr.Value, len(obj.NestedList)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]attr.Value, len(obj.NestedList))
									}
								}
								if obj.NestedList != nil {
									o := o.ElemType.(types.ObjectType)
									for k, a := range obj.NestedList {
										v, ok := tf.Attrs["nested_list"].(types.Object)
										if !ok {
											v = types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
											}
										}
										if a == nil {
											v.Null = true
										} else {
											obj := a
											tf := &v
											{
												_, ok := tf.AttrTypes["str"]
												if !ok {
													diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable.NestedList.Str is missing in the target Terraform object AttrTypes")
												} else {
													v, ok := tf.Attrs["str"].(types.String)
													if !ok {
														v = types.String{}
													}
													v.Value = string(obj.Str)
													v.Unknown = false
													tf.Attrs["str"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["nested_list"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["map"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable.Map is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.MapType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullable.Map can not be converted to types.MapType")
							} else {
								c, ok := tf.Attrs["map"].(types.Map)
								if !ok {
									c = types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]attr.Value, len(obj.Map)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]attr.Value, len(obj.Map))
									}
								}
								if obj.Map != nil {
									for k, a := range obj.Map {
										v, ok := tf.Attrs["map"].(types.String)
										if !ok {
											v = types.String{}
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["map"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["map_object_nested"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable.MapObjectNested is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.MapType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullable.MapObjectNested can not be converted to types.MapType")
							} else {
								c, ok := tf.Attrs["map_object_nested"].(types.Map)
								if !ok {
									c = types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
									}
								}
								if obj.MapObjectNested != nil {
									o := o.ElemType.(types.ObjectType)
									for k, a := range obj.MapObjectNested {
										v, ok := tf.Attrs["map_object_nested"].(types.Object)
										if !ok {
											v = types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												_, ok := tf.AttrTypes["str"]
												if !ok {
													diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullable.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
												} else {
													v, ok := tf.Attrs["str"].(types.String)
													if !ok {
														v = types.String{}
													}
													v.Value = string(obj.Str)
													v.Unknown = false
													tf.Attrs["str"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["map_object_nested"] = c
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["nested_nullable"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["nested_nullable_with_nil_value"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ObjectType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullableWithNilValue can not be converted to types.ObjectType")
			} else {
				v, ok := tf.Attrs["nested_nullable_with_nil_value"].(types.Object)
				if !ok {
					v = types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.NestedNullableWithNilValue == nil {
					v.Null = true
				} else {
					obj := obj.NestedNullableWithNilValue
					tf := &v
					{
						_, ok := tf.AttrTypes["str"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue.Str is missing in the target Terraform object AttrTypes")
						} else {
							v, ok := tf.Attrs["str"].(types.String)
							if !ok {
								v = types.String{}
							}
							v.Value = string(obj.Str)
							v.Unknown = false
							tf.Attrs["str"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["nested_list"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue.NestedList is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.ListType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullableWithNilValue.NestedList can not be converted to types.ListType")
							} else {
								c, ok := tf.Attrs["nested_list"].(types.List)
								if !ok {
									c = types.List{

										ElemType: o.ElemType,
										Elems:    make([]attr.Value, len(obj.NestedList)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]attr.Value, len(obj.NestedList))
									}
								}
								if obj.NestedList != nil {
									o := o.ElemType.(types.ObjectType)
									for k, a := range obj.NestedList {
										v, ok := tf.Attrs["nested_list"].(types.Object)
										if !ok {
											v = types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
											}
										}
										if a == nil {
											v.Null = true
										} else {
											obj := a
											tf := &v
											{
												_, ok := tf.AttrTypes["str"]
												if !ok {
													diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue.NestedList.Str is missing in the target Terraform object AttrTypes")
												} else {
													v, ok := tf.Attrs["str"].(types.String)
													if !ok {
														v = types.String{}
													}
													v.Value = string(obj.Str)
													v.Unknown = false
													tf.Attrs["str"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["nested_list"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["map"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue.Map is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.MapType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullableWithNilValue.Map can not be converted to types.MapType")
							} else {
								c, ok := tf.Attrs["map"].(types.Map)
								if !ok {
									c = types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]attr.Value, len(obj.Map)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]attr.Value, len(obj.Map))
									}
								}
								if obj.Map != nil {
									for k, a := range obj.Map {
										v, ok := tf.Attrs["map"].(types.String)
										if !ok {
											v = types.String{}
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["map"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["map_object_nested"]
						if !ok {
							diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue.MapObjectNested is missing in the target Terraform object AttrTypes")
						} else {
							o, ok := a.(types.MapType)
							if !ok {
								diags.AddError("Error writing value to Terraform", "A type for Test.NestedNullableWithNilValue.MapObjectNested can not be converted to types.MapType")
							} else {
								c, ok := tf.Attrs["map_object_nested"].(types.Map)
								if !ok {
									c = types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
									}
								}
								if obj.MapObjectNested != nil {
									o := o.ElemType.(types.ObjectType)
									for k, a := range obj.MapObjectNested {
										v, ok := tf.Attrs["map_object_nested"].(types.Object)
										if !ok {
											v = types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												_, ok := tf.AttrTypes["str"]
												if !ok {
													diags.AddError("Error writing value to Terraform", "A value type for Test.NestedNullableWithNilValue.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
												} else {
													v, ok := tf.Attrs["str"].(types.String)
													if !ok {
														v = types.String{}
													}
													v.Value = string(obj.Str)
													v.Unknown = false
													tf.Attrs["str"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
								}
								c.Unknown = false
								tf.Attrs["map_object_nested"] = c
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["nested_nullable_with_nil_value"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["nested_list"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.NestedList can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["nested_list"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.NestedList)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.NestedList))
					}
				}
				if obj.NestedList != nil {
					o := o.ElemType.(types.ObjectType)
					for k, a := range obj.NestedList {
						v, ok := tf.Attrs["nested_list"].(types.Object)
						if !ok {
							v = types.Object{

								AttrTypes: o.AttrTypes,
								Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
							}
						} else {
							if v.Attrs == nil {
								v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
							}
						}
						{
							obj := a
							tf := &v
							{
								_, ok := tf.AttrTypes["str"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList.Str is missing in the target Terraform object AttrTypes")
								} else {
									v, ok := tf.Attrs["str"].(types.String)
									if !ok {
										v = types.String{}
									}
									v.Value = string(obj.Str)
									v.Unknown = false
									tf.Attrs["str"] = v
								}
							}
							{
								a, ok := tf.AttrTypes["nested_list"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList.NestedList is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.ListType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.NestedList.NestedList can not be converted to types.ListType")
									} else {
										c, ok := tf.Attrs["nested_list"].(types.List)
										if !ok {
											c = types.List{

												ElemType: o.ElemType,
												Elems:    make([]attr.Value, len(obj.NestedList)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make([]attr.Value, len(obj.NestedList))
											}
										}
										if obj.NestedList != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.NestedList {
												v, ok := tf.Attrs["nested_list"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												if a == nil {
													v.Null = true
												} else {
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList.NestedList.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["nested_list"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList.Map is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.NestedList.Map can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.Map)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.Map))
											}
										}
										if obj.Map != nil {
											for k, a := range obj.Map {
												v, ok := tf.Attrs["map"].(types.String)
												if !ok {
													v = types.String{}
												}
												v.Value = string(a)
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map_object_nested"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList.MapObjectNested is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.NestedList.MapObjectNested can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map_object_nested"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
											}
										}
										if obj.MapObjectNested != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.MapObjectNested {
												v, ok := tf.Attrs["map_object_nested"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.NestedList.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map_object_nested"] = c
									}
								}
							}
						}
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["nested_list"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["nested_list_nullable"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.ListType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.NestedListNullable can not be converted to types.ListType")
			} else {
				c, ok := tf.Attrs["nested_list_nullable"].(types.List)
				if !ok {
					c = types.List{

						ElemType: o.ElemType,
						Elems:    make([]attr.Value, len(obj.NestedListNullable)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make([]attr.Value, len(obj.NestedListNullable))
					}
				}
				if obj.NestedListNullable != nil {
					o := o.ElemType.(types.ObjectType)
					for k, a := range obj.NestedListNullable {
						v, ok := tf.Attrs["nested_list_nullable"].(types.Object)
						if !ok {
							v = types.Object{

								AttrTypes: o.AttrTypes,
								Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
							}
						} else {
							if v.Attrs == nil {
								v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
							}
						}
						if a == nil {
							v.Null = true
						} else {
							obj := a
							tf := &v
							{
								_, ok := tf.AttrTypes["str"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable.Str is missing in the target Terraform object AttrTypes")
								} else {
									v, ok := tf.Attrs["str"].(types.String)
									if !ok {
										v = types.String{}
									}
									v.Value = string(obj.Str)
									v.Unknown = false
									tf.Attrs["str"] = v
								}
							}
							{
								a, ok := tf.AttrTypes["nested_list"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable.NestedList is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.ListType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.NestedListNullable.NestedList can not be converted to types.ListType")
									} else {
										c, ok := tf.Attrs["nested_list"].(types.List)
										if !ok {
											c = types.List{

												ElemType: o.ElemType,
												Elems:    make([]attr.Value, len(obj.NestedList)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make([]attr.Value, len(obj.NestedList))
											}
										}
										if obj.NestedList != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.NestedList {
												v, ok := tf.Attrs["nested_list"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												if a == nil {
													v.Null = true
												} else {
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable.NestedList.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["nested_list"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable.Map is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.NestedListNullable.Map can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.Map)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.Map))
											}
										}
										if obj.Map != nil {
											for k, a := range obj.Map {
												v, ok := tf.Attrs["map"].(types.String)
												if !ok {
													v = types.String{}
												}
												v.Value = string(a)
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map_object_nested"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable.MapObjectNested is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.NestedListNullable.MapObjectNested can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map_object_nested"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
											}
										}
										if obj.MapObjectNested != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.MapObjectNested {
												v, ok := tf.Attrs["map_object_nested"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.NestedListNullable.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map_object_nested"] = c
									}
								}
							}
						}
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["nested_list_nullable"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["map"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.Map is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.MapType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.Map can not be converted to types.MapType")
			} else {
				c, ok := tf.Attrs["map"].(types.Map)
				if !ok {
					c = types.Map{

						ElemType: o.ElemType,
						Elems:    make(map[string]attr.Value, len(obj.Map)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make(map[string]attr.Value, len(obj.Map))
					}
				}
				if obj.Map != nil {
					for k, a := range obj.Map {
						v, ok := tf.Attrs["map"].(types.String)
						if !ok {
							v = types.String{}
						}
						v.Value = string(a)
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["map"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["map_object"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.MapType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.MapObject can not be converted to types.MapType")
			} else {
				c, ok := tf.Attrs["map_object"].(types.Map)
				if !ok {
					c = types.Map{

						ElemType: o.ElemType,
						Elems:    make(map[string]attr.Value, len(obj.MapObject)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make(map[string]attr.Value, len(obj.MapObject))
					}
				}
				if obj.MapObject != nil {
					o := o.ElemType.(types.ObjectType)
					for k, a := range obj.MapObject {
						v, ok := tf.Attrs["map_object"].(types.Object)
						if !ok {
							v = types.Object{

								AttrTypes: o.AttrTypes,
								Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
							}
						} else {
							if v.Attrs == nil {
								v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
							}
						}
						{
							obj := a
							tf := &v
							{
								_, ok := tf.AttrTypes["str"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject.Str is missing in the target Terraform object AttrTypes")
								} else {
									v, ok := tf.Attrs["str"].(types.String)
									if !ok {
										v = types.String{}
									}
									v.Value = string(obj.Str)
									v.Unknown = false
									tf.Attrs["str"] = v
								}
							}
							{
								a, ok := tf.AttrTypes["nested_list"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject.NestedList is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.ListType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.MapObject.NestedList can not be converted to types.ListType")
									} else {
										c, ok := tf.Attrs["nested_list"].(types.List)
										if !ok {
											c = types.List{

												ElemType: o.ElemType,
												Elems:    make([]attr.Value, len(obj.NestedList)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make([]attr.Value, len(obj.NestedList))
											}
										}
										if obj.NestedList != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.NestedList {
												v, ok := tf.Attrs["nested_list"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												if a == nil {
													v.Null = true
												} else {
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject.NestedList.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["nested_list"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject.Map is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.MapObject.Map can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.Map)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.Map))
											}
										}
										if obj.Map != nil {
											for k, a := range obj.Map {
												v, ok := tf.Attrs["map"].(types.String)
												if !ok {
													v = types.String{}
												}
												v.Value = string(a)
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map_object_nested"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject.MapObjectNested is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.MapObject.MapObjectNested can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map_object_nested"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
											}
										}
										if obj.MapObjectNested != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.MapObjectNested {
												v, ok := tf.Attrs["map_object_nested"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.MapObject.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map_object_nested"] = c
									}
								}
							}
						}
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["map_object"] = c
			}
		}
	}
	{
		a, ok := tf.AttrTypes["map_object_nullable"]
		if !ok {
			diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable is missing in the target Terraform object AttrTypes")
		} else {
			o, ok := a.(types.MapType)
			if !ok {
				diags.AddError("Error writing value to Terraform", "A type for Test.MapObjectNullable can not be converted to types.MapType")
			} else {
				c, ok := tf.Attrs["map_object_nullable"].(types.Map)
				if !ok {
					c = types.Map{

						ElemType: o.ElemType,
						Elems:    make(map[string]attr.Value, len(obj.MapObjectNullable)),
					}
				} else {
					if c.Elems == nil {
						c.Elems = make(map[string]attr.Value, len(obj.MapObjectNullable))
					}
				}
				if obj.MapObjectNullable != nil {
					o := o.ElemType.(types.ObjectType)
					for k, a := range obj.MapObjectNullable {
						v, ok := tf.Attrs["map_object_nullable"].(types.Object)
						if !ok {
							v = types.Object{

								AttrTypes: o.AttrTypes,
								Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
							}
						} else {
							if v.Attrs == nil {
								v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
							}
						}
						if a == nil {
							v.Null = true
						} else {
							obj := a
							tf := &v
							{
								_, ok := tf.AttrTypes["str"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable.Str is missing in the target Terraform object AttrTypes")
								} else {
									v, ok := tf.Attrs["str"].(types.String)
									if !ok {
										v = types.String{}
									}
									v.Value = string(obj.Str)
									v.Unknown = false
									tf.Attrs["str"] = v
								}
							}
							{
								a, ok := tf.AttrTypes["nested_list"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable.NestedList is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.ListType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.MapObjectNullable.NestedList can not be converted to types.ListType")
									} else {
										c, ok := tf.Attrs["nested_list"].(types.List)
										if !ok {
											c = types.List{

												ElemType: o.ElemType,
												Elems:    make([]attr.Value, len(obj.NestedList)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make([]attr.Value, len(obj.NestedList))
											}
										}
										if obj.NestedList != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.NestedList {
												v, ok := tf.Attrs["nested_list"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												if a == nil {
													v.Null = true
												} else {
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable.NestedList.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["nested_list"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable.Map is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.MapObjectNullable.Map can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.Map)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.Map))
											}
										}
										if obj.Map != nil {
											for k, a := range obj.Map {
												v, ok := tf.Attrs["map"].(types.String)
												if !ok {
													v = types.String{}
												}
												v.Value = string(a)
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map"] = c
									}
								}
							}
							{
								a, ok := tf.AttrTypes["map_object_nested"]
								if !ok {
									diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable.MapObjectNested is missing in the target Terraform object AttrTypes")
								} else {
									o, ok := a.(types.MapType)
									if !ok {
										diags.AddError("Error writing value to Terraform", "A type for Test.MapObjectNullable.MapObjectNested can not be converted to types.MapType")
									} else {
										c, ok := tf.Attrs["map_object_nested"].(types.Map)
										if !ok {
											c = types.Map{

												ElemType: o.ElemType,
												Elems:    make(map[string]attr.Value, len(obj.MapObjectNested)),
											}
										} else {
											if c.Elems == nil {
												c.Elems = make(map[string]attr.Value, len(obj.MapObjectNested))
											}
										}
										if obj.MapObjectNested != nil {
											o := o.ElemType.(types.ObjectType)
											for k, a := range obj.MapObjectNested {
												v, ok := tf.Attrs["map_object_nested"].(types.Object)
												if !ok {
													v = types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := a
													tf := &v
													{
														_, ok := tf.AttrTypes["str"]
														if !ok {
															diags.AddError("Error writing value to Terraform", "A value type for Test.MapObjectNullable.MapObjectNested.Str is missing in the target Terraform object AttrTypes")
														} else {
															v, ok := tf.Attrs["str"].(types.String)
															if !ok {
																v = types.String{}
															}
															v.Value = string(obj.Str)
															v.Unknown = false
															tf.Attrs["str"] = v
														}
													}
												}
												v.Unknown = false
												c.Elems[k] = v
											}
										}
										c.Unknown = false
										tf.Attrs["map_object_nested"] = c
									}
								}
							}
						}
						v.Unknown = false
						c.Elems[k] = v
					}
				}
				c.Unknown = false
				tf.Attrs["map_object_nullable"] = c
			}
		}
	}
	return diags
}
