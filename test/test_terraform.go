/*
Copyright 2015-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package test

import (
	"context"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	types "github.com/hashicorp/terraform-plugin-framework/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// GenSchemaTest returns tfsdk.Schema definition for Test
func GenSchemaTest(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{Attributes: map[string]tfsdk.Attribute{
		"bool": {
			Description: "Bool bool field",
			Optional:    true,
			Type:        types.BoolType,
		},
		"bool_custom_list": GenSchemaBoolCustom(ctx),
		"bytes": {
			Description: "Bytes byte[] field",
			Optional:    true,
			Type:        types.StringType,
		},
		"bytes_list": {
			Description: "BytesList [][]byte field",
			Optional:    true,
			Type:        types.ListType{ElemType: types.StringType},
		},
		"double": {
			Description: "Double double field",
			Optional:    true,
			Type:        types.Float64Type,
		},
		"duration_custom": {
			Description: "DurationCustom time.Duration field (with casttype)",
			Optional:    true,
			Type:        DurationType{},
		},
		"duration_custom_list": {
			Description: "DurationCustomList []time.Duration field",
			Optional:    true,
			Type:        types.ListType{ElemType: DurationType{}},
		},
		"duration_custom_missing": {
			Description: "DurationCustomMissing time.Duration field (with casttype) missing in input data",
			Optional:    true,
			Type:        DurationType{},
		},
		"duration_standard": {
			Description: "DurationStandard time.Duration field (standard)",
			Optional:    true,
			Type:        DurationType{},
		},
		"duration_standard_missing": {
			Description: "DurationStandardMissing time.Duration field (standard) missing in input data",
			Optional:    true,
			Type:        DurationType{},
		},
		"float": {
			Description: "Float float field",
			Optional:    true,
			Type:        types.Float64Type,
		},
		"int32": {
			Description: "Int32 int32 field",
			Optional:    true,
			Type:        types.Int64Type,
		},
		"int64": {
			Description: "Int64 int64 field",
			Optional:    true,
			Type:        types.Int64Type,
		},
		"map": {
			Description: "Map normal map",
			Optional:    true,
			Type:        types.MapType{ElemType: types.StringType},
		},
		"map_object": {
			Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.MapNestedAttributesOptions{}),
			Description: "MapObject is the object map",
			Optional:    true,
		},
		"map_object_nullable": {
			Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.MapNestedAttributesOptions{}),
			Description: "MapObjectNullable is the object map with nullable values",
			Optional:    true,
		},
		"nested": {
			Attributes: tfsdk.SingleNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}),
			Description: "Nested nested message field, non-nullable",
			Optional:    true,
		},
		"nested_list": {
			Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.ListNestedAttributesOptions{}),
			Description: "NestedList nested message array",
			Optional:    true,
		},
		"nested_list_nullable": {
			Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}, tfsdk.ListNestedAttributesOptions{}),
			Description: "NestedListNullable nested message array",
			Optional:    true,
		},
		"nested_nullable": {
			Attributes: tfsdk.SingleNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}),
			Description: "NestedNullable nested message field, nullabel",
			Optional:    true,
		},
		"nested_nullable_with_nil_value": {
			Attributes: tfsdk.SingleNestedAttributes(map[string]tfsdk.Attribute{
				"map": {
					Description: "Nested map repeated nested messages",
					Optional:    true,
					Type:        types.MapType{ElemType: types.StringType},
				},
				"map_object_nested": {
					Attributes: tfsdk.MapNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.MapNestedAttributesOptions{}),
					Description: "MapObjectNested nested object map",
					Optional:    true,
				},
				"nested_list": {
					Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{"str": {
						Description: "Str string field",
						Optional:    true,
						Type:        types.StringType,
					}}, tfsdk.ListNestedAttributesOptions{}),
					Description: "Nested repeated nested messages",
					Optional:    true,
				},
				"str": {
					Description: "Str string field",
					Optional:    true,
					Type:        types.StringType,
				},
			}),
			Description: "NestedNullableWithNilValue nested message field, with no value set",
			Optional:    true,
		},
		"str": {
			Description: "Str string field",
			Optional:    true,
			Type:        types.StringType,
		},
		"string_list": {
			Description: "StringList []string field",
			Optional:    true,
			Type:        types.ListType{ElemType: types.StringType},
		},
		"string_list_empty": {
			Description: "StringListEmpty []string field",
			Optional:    true,
			Type:        types.ListType{ElemType: types.StringType},
		},
		"timestamp": {
			Description: "Timestamp time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
		"timestamp_list": {
			Description: "TimestampList []time.Time field",
			Optional:    true,
			Type:        types.ListType{ElemType: TimeType{}},
		},
		"timestamp_missing": {
			Description: "Timestamp time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
		"timestamp_nullable": {
			Description: "TimestampNullable *time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
		"timestamp_nullable_with_nil_value": {
			Description: "TimestampNullableWithNilValue *time.Time field",
			Optional:    true,
			Type:        TimeType{},
		},
	}}, nil
}

// CopyTestFromTerraform copies the contents of the source Terraform object into target struct
func CopyTestFromTerraform(tf types.Object, obj *Test) error {
	{
		a, ok := tf.Attrs["str"]
		if !ok {
			return fmt.Errorf("Attr str is missing in the Terraform object (Test.Str)")
		}
		v, ok := a.(types.String)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Str to types.String")
		}
		if v.Unknown || v.Null {
			obj.Str = ""
		} else {
			convert := string(v.Value)
			obj.Str = convert
		}
	}
	{
		a, ok := tf.Attrs["int32"]
		if !ok {
			return fmt.Errorf("Attr int32 is missing in the Terraform object (Test.Int32)")
		}
		v, ok := a.(types.Int64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Int32 to types.Int64")
		}
		if v.Unknown || v.Null {
			obj.Int32 = 0
		} else {
			convert := int32(v.Value)
			obj.Int32 = convert
		}
	}
	{
		a, ok := tf.Attrs["int64"]
		if !ok {
			return fmt.Errorf("Attr int64 is missing in the Terraform object (Test.Int64)")
		}
		v, ok := a.(types.Int64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Int64 to types.Int64")
		}
		if v.Unknown || v.Null {
			obj.Int64 = 0
		} else {
			convert := int64(v.Value)
			obj.Int64 = convert
		}
	}
	{
		a, ok := tf.Attrs["float"]
		if !ok {
			return fmt.Errorf("Attr float is missing in the Terraform object (Test.Float)")
		}
		v, ok := a.(types.Float64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Float to types.Float64")
		}
		if v.Unknown || v.Null {
			obj.Float = 0.0
		} else {
			convert := float32(v.Value)
			obj.Float = convert
		}
	}
	{
		a, ok := tf.Attrs["double"]
		if !ok {
			return fmt.Errorf("Attr double is missing in the Terraform object (Test.Double)")
		}
		v, ok := a.(types.Float64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Double to types.Float64")
		}
		if v.Unknown || v.Null {
			obj.Double = 0.0
		} else {
			convert := float64(v.Value)
			obj.Double = convert
		}
	}
	{
		a, ok := tf.Attrs["bool"]
		if !ok {
			return fmt.Errorf("Attr bool is missing in the Terraform object (Test.Bool)")
		}
		v, ok := a.(types.Bool)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Bool to types.Bool")
		}
		if v.Unknown || v.Null {
			obj.Bool = false
		} else {
			convert := bool(v.Value)
			obj.Bool = convert
		}
	}
	{
		a, ok := tf.Attrs["bytes"]
		if !ok {
			return fmt.Errorf("Attr bytes is missing in the Terraform object (Test.Bytes)")
		}
		v, ok := a.(types.String)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Bytes to types.String")
		}
		if v.Unknown || v.Null {
			obj.Bytes = nil
		} else {
			convert := []byte(v.Value)
			obj.Bytes = convert
		}
	}
	{
		a, ok := tf.Attrs["timestamp"]
		if !ok {
			return fmt.Errorf("Attr timestamp is missing in the Terraform object (Test.Timestamp)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Timestamp to TimeValue")
		}
		if v.Unknown || v.Null {
			obj.Timestamp = time.Time{}
		} else {
			convert := time.Time(v.Value)
			obj.Timestamp = convert
		}
	}
	{
		a, ok := tf.Attrs["timestamp_missing"]
		if !ok {
			return fmt.Errorf("Attr timestamp_missing is missing in the Terraform object (Test.TimestampMissing)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampMissing to TimeValue")
		}
		if v.Unknown || v.Null {
			obj.TimestampMissing = time.Time{}
		} else {
			convert := time.Time(v.Value)
			obj.TimestampMissing = convert
		}
	}
	{
		a, ok := tf.Attrs["timestamp_nullable"]
		if !ok {
			return fmt.Errorf("Attr timestamp_nullable is missing in the Terraform object (Test.TimestampNullable)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampNullable to TimeValue")
		}
		if v.Unknown || v.Null {
			obj.TimestampNullable = nil
		} else {
			convert := time.Time(v.Value)
			obj.TimestampNullable = &convert
		}
	}
	{
		a, ok := tf.Attrs["timestamp_nullable_with_nil_value"]
		if !ok {
			return fmt.Errorf("Attr timestamp_nullable_with_nil_value is missing in the Terraform object (Test.TimestampNullableWithNilValue)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampNullableWithNilValue to TimeValue")
		}
		if v.Unknown || v.Null {
			obj.TimestampNullableWithNilValue = nil
		} else {
			convert := time.Time(v.Value)
			obj.TimestampNullableWithNilValue = &convert
		}
	}
	{
		a, ok := tf.Attrs["duration_standard"]
		if !ok {
			return fmt.Errorf("Attr duration_standard is missing in the Terraform object (Test.DurationStandard)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationStandard to DurationValue")
		}
		if v.Unknown || v.Null {
			obj.DurationStandard = 0
		} else {
			convert := time.Duration(v.Value)
			obj.DurationStandard = convert
		}
	}
	{
		a, ok := tf.Attrs["duration_standard_missing"]
		if !ok {
			return fmt.Errorf("Attr duration_standard_missing is missing in the Terraform object (Test.DurationStandardMissing)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationStandardMissing to DurationValue")
		}
		if v.Unknown || v.Null {
			obj.DurationStandardMissing = 0
		} else {
			convert := time.Duration(v.Value)
			obj.DurationStandardMissing = convert
		}
	}
	{
		a, ok := tf.Attrs["duration_custom"]
		if !ok {
			return fmt.Errorf("Attr duration_custom is missing in the Terraform object (Test.DurationCustom)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationCustom to DurationValue")
		}
		if v.Unknown || v.Null {
			obj.DurationCustom = Duration(0)
		} else {
			convert := Duration(v.Value)
			obj.DurationCustom = convert
		}
	}
	{
		a, ok := tf.Attrs["duration_custom_missing"]
		if !ok {
			return fmt.Errorf("Attr duration_custom_missing is missing in the Terraform object (Test.DurationCustomMissing)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationCustomMissing to DurationValue")
		}
		if v.Unknown || v.Null {
			obj.DurationCustomMissing = Duration(0)
		} else {
			convert := Duration(v.Value)
			obj.DurationCustomMissing = convert
		}
	}
	{
		a, ok := tf.Attrs["string_list"]
		if !ok {
			return fmt.Errorf("Attr string_list is missing in the Terraform object (Test.StringList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.StringList to types.List")
		}
		if v.Null || v.Unknown {
			obj.StringList = nil
		} else {
			obj.StringList = make([]string, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.StringList to types.String")
				}
				var el string
				if v.Unknown || v.Null {
					el = ""
				} else {
					convert := string(v.Value)
					el = convert
				}
				obj.StringList[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["string_list_empty"]
		if !ok {
			return fmt.Errorf("Attr string_list_empty is missing in the Terraform object (Test.StringListEmpty)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.StringListEmpty to types.List")
		}
		if v.Null || v.Unknown {
			obj.StringListEmpty = nil
		} else {
			obj.StringListEmpty = make([]string, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.StringListEmpty to types.String")
				}
				var el string
				if v.Unknown || v.Null {
					el = ""
				} else {
					convert := string(v.Value)
					el = convert
				}
				obj.StringListEmpty[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["bool_custom_list"]
		if !ok {
			return fmt.Errorf("Attr bool_custom_list is missing in the Terraform object (Test.BoolCustomList)")
		}
		err := CopyFromBoolCustom(a, &obj.BoolCustomList)
		if err != nil {
			return err
		}
	}
	{
		a, ok := tf.Attrs["bytes_list"]
		if !ok {
			return fmt.Errorf("Attr bytes_list is missing in the Terraform object (Test.BytesList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.BytesList to types.List")
		}
		if v.Null || v.Unknown {
			obj.BytesList = nil
		} else {
			obj.BytesList = make([][]byte, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.BytesList to types.String")
				}
				var el []byte
				if v.Unknown || v.Null {
					el = nil
				} else {
					convert := []byte(v.Value)
					el = convert
				}
				obj.BytesList[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["timestamp_list"]
		if !ok {
			return fmt.Errorf("Attr timestamp_list is missing in the Terraform object (Test.TimestampList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampList to types.List")
		}
		if v.Null || v.Unknown {
			obj.TimestampList = nil
		} else {
			obj.TimestampList = make([]*time.Time, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(TimeValue)
				if !ok {
					return fmt.Errorf("Failed to convert Test.TimestampList to TimeValue")
				}
				var el *time.Time
				if v.Unknown || v.Null {
					el = nil
				} else {
					convert := time.Time(v.Value)
					el = &convert
				}
				obj.TimestampList[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["duration_custom_list"]
		if !ok {
			return fmt.Errorf("Attr duration_custom_list is missing in the Terraform object (Test.DurationCustomList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationCustomList to types.List")
		}
		if v.Null || v.Unknown {
			obj.DurationCustomList = nil
		} else {
			obj.DurationCustomList = make([]Duration, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(DurationValue)
				if !ok {
					return fmt.Errorf("Failed to convert Test.DurationCustomList to DurationValue")
				}
				var el Duration
				if v.Unknown || v.Null {
					el = Duration(0)
				} else {
					convert := Duration(v.Value)
					el = convert
				}
				obj.DurationCustomList[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["nested"]
		if !ok {
			return fmt.Errorf("Attr nested is missing in the Terraform object (Test.Nested)")
		}
		v, ok := a.(types.Object)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Nested to types.Object")
		}
		if v.Null || v.Unknown {
			obj.Nested = Nested{}
		} else {
			tf := v
			obj := &obj.Nested
			{
				a, ok := tf.Attrs["str"]
				if !ok {
					return fmt.Errorf("Attr str is missing in the Terraform object (Test.Nested.Str)")
				}
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.Nested.Str to types.String")
				}
				if v.Unknown || v.Null {
					obj.Str = ""
				} else {
					convert := string(v.Value)
					obj.Str = convert
				}
			}
			{
				a, ok := tf.Attrs["nested_list"]
				if !ok {
					return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.Nested.NestedList)")
				}
				v, ok := a.(types.List)
				if !ok {
					return fmt.Errorf("Failed to convert Test.Nested.NestedList to types.List")
				}
				if v.Null || v.Unknown {
					obj.NestedList = nil
				} else {
					obj.NestedList = make([]*OtherNested, len(v.Elems))
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							return fmt.Errorf("Failed to convert Test.Nested.NestedList to types.Object")
						}
						var el *OtherNested
						if v.Null || v.Unknown {
							el = nil
						} else {
							el = &OtherNested{}
							tf := v
							obj := el
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.Nested.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.Nested.NestedList.Str to types.String")
								}
								if v.Unknown || v.Null {
									obj.Str = ""
								} else {
									convert := string(v.Value)
									obj.Str = convert
								}
							}
						}
						obj.NestedList[k] = el
					}
				}
			}
			{
				a, ok := tf.Attrs["map"]
				if !ok {
					return fmt.Errorf("Attr map is missing in the Terraform object (Test.Nested.Map)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.Nested.Map to types.Map")
				}
				if v.Null || v.Unknown {
					obj.Map = nil
				} else {
					obj.Map = make(map[string]string)
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.Nested.Map to types.String")
						}
						var el string
						if v.Unknown || v.Null {
							el = ""
						} else {
							convert := string(v.Value)
							el = convert
						}
						obj.Map[k] = el
					}
				}
			}
			{
				a, ok := tf.Attrs["map_object_nested"]
				if !ok {
					return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.Nested.MapObjectNested)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.Nested.MapObjectNested to types.Map")
				}
				if v.Null || v.Unknown {
					obj.MapObjectNested = nil
				} else {
					obj.MapObjectNested = make(map[string]OtherNested)
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							return fmt.Errorf("Failed to convert Test.Nested.MapObjectNested to types.Object")
						}
						var el OtherNested
						if v.Null || v.Unknown {
							el = OtherNested{}
						} else {
							tf := v
							obj := &el
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.Nested.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.Nested.MapObjectNested.Str to types.String")
								}
								if v.Unknown || v.Null {
									obj.Str = ""
								} else {
									convert := string(v.Value)
									obj.Str = convert
								}
							}
						}
						obj.MapObjectNested[k] = el
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_nullable"]
		if !ok {
			return fmt.Errorf("Attr nested_nullable is missing in the Terraform object (Test.NestedNullable)")
		}
		v, ok := a.(types.Object)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedNullable to types.Object")
		}
		if v.Null || v.Unknown {
			obj.NestedNullable = nil
		} else {
			obj.NestedNullable = &Nested{}
			tf := v
			obj := obj.NestedNullable
			{
				a, ok := tf.Attrs["str"]
				if !ok {
					return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullable.Str)")
				}
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.Str to types.String")
				}
				if v.Unknown || v.Null {
					obj.Str = ""
				} else {
					convert := string(v.Value)
					obj.Str = convert
				}
			}
			{
				a, ok := tf.Attrs["nested_list"]
				if !ok {
					return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedNullable.NestedList)")
				}
				v, ok := a.(types.List)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.NestedList to types.List")
				}
				if v.Null || v.Unknown {
					obj.NestedList = nil
				} else {
					obj.NestedList = make([]*OtherNested, len(v.Elems))
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedNullable.NestedList to types.Object")
						}
						var el *OtherNested
						if v.Null || v.Unknown {
							el = nil
						} else {
							el = &OtherNested{}
							tf := v
							obj := el
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullable.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedNullable.NestedList.Str to types.String")
								}
								if v.Unknown || v.Null {
									obj.Str = ""
								} else {
									convert := string(v.Value)
									obj.Str = convert
								}
							}
						}
						obj.NestedList[k] = el
					}
				}
			}
			{
				a, ok := tf.Attrs["map"]
				if !ok {
					return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedNullable.Map)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.Map to types.Map")
				}
				if v.Null || v.Unknown {
					obj.Map = nil
				} else {
					obj.Map = make(map[string]string)
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedNullable.Map to types.String")
						}
						var el string
						if v.Unknown || v.Null {
							el = ""
						} else {
							convert := string(v.Value)
							el = convert
						}
						obj.Map[k] = el
					}
				}
			}
			{
				a, ok := tf.Attrs["map_object_nested"]
				if !ok {
					return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedNullable.MapObjectNested)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.MapObjectNested to types.Map")
				}
				if v.Null || v.Unknown {
					obj.MapObjectNested = nil
				} else {
					obj.MapObjectNested = make(map[string]OtherNested)
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedNullable.MapObjectNested to types.Object")
						}
						var el OtherNested
						if v.Null || v.Unknown {
							el = OtherNested{}
						} else {
							tf := v
							obj := &el
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullable.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedNullable.MapObjectNested.Str to types.String")
								}
								if v.Unknown || v.Null {
									obj.Str = ""
								} else {
									convert := string(v.Value)
									obj.Str = convert
								}
							}
						}
						obj.MapObjectNested[k] = el
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_nullable_with_nil_value"]
		if !ok {
			return fmt.Errorf("Attr nested_nullable_with_nil_value is missing in the Terraform object (Test.NestedNullableWithNilValue)")
		}
		v, ok := a.(types.Object)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue to types.Object")
		}
		if v.Null || v.Unknown {
			obj.NestedNullableWithNilValue = nil
		} else {
			obj.NestedNullableWithNilValue = &Nested{}
			tf := v
			obj := obj.NestedNullableWithNilValue
			{
				a, ok := tf.Attrs["str"]
				if !ok {
					return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullableWithNilValue.Str)")
				}
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.Str to types.String")
				}
				if v.Unknown || v.Null {
					obj.Str = ""
				} else {
					convert := string(v.Value)
					obj.Str = convert
				}
			}
			{
				a, ok := tf.Attrs["nested_list"]
				if !ok {
					return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedNullableWithNilValue.NestedList)")
				}
				v, ok := a.(types.List)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.NestedList to types.List")
				}
				if v.Null || v.Unknown {
					obj.NestedList = nil
				} else {
					obj.NestedList = make([]*OtherNested, len(v.Elems))
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.NestedList to types.Object")
						}
						var el *OtherNested
						if v.Null || v.Unknown {
							el = nil
						} else {
							el = &OtherNested{}
							tf := v
							obj := el
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullableWithNilValue.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.NestedList.Str to types.String")
								}
								if v.Unknown || v.Null {
									obj.Str = ""
								} else {
									convert := string(v.Value)
									obj.Str = convert
								}
							}
						}
						obj.NestedList[k] = el
					}
				}
			}
			{
				a, ok := tf.Attrs["map"]
				if !ok {
					return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedNullableWithNilValue.Map)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.Map to types.Map")
				}
				if v.Null || v.Unknown {
					obj.Map = nil
				} else {
					obj.Map = make(map[string]string)
					for k, a := range v.Elems {
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.Map to types.String")
						}
						var el string
						if v.Unknown || v.Null {
							el = ""
						} else {
							convert := string(v.Value)
							el = convert
						}
						obj.Map[k] = el
					}
				}
			}
			{
				a, ok := tf.Attrs["map_object_nested"]
				if !ok {
					return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedNullableWithNilValue.MapObjectNested)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.MapObjectNested to types.Map")
				}
				if v.Null || v.Unknown {
					obj.MapObjectNested = nil
				} else {
					obj.MapObjectNested = make(map[string]OtherNested)
					for k, a := range v.Elems {
						v, ok := a.(types.Object)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.MapObjectNested to types.Object")
						}
						var el OtherNested
						if v.Null || v.Unknown {
							el = OtherNested{}
						} else {
							tf := v
							obj := &el
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullableWithNilValue.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.MapObjectNested.Str to types.String")
								}
								if v.Unknown || v.Null {
									obj.Str = ""
								} else {
									convert := string(v.Value)
									obj.Str = convert
								}
							}
						}
						obj.MapObjectNested[k] = el
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_list"]
		if !ok {
			return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedList to types.List")
		}
		if v.Null || v.Unknown {
			obj.NestedList = nil
		} else {
			obj.NestedList = make([]Nested, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(types.Object)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedList to types.Object")
				}
				var el Nested
				if v.Null || v.Unknown {
					el = Nested{}
				} else {
					tf := v
					obj := &el
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedList.Str)")
						}
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedList.Str to types.String")
						}
						if v.Unknown || v.Null {
							obj.Str = ""
						} else {
							convert := string(v.Value)
							obj.Str = convert
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedList.NestedList)")
						}
						v, ok := a.(types.List)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedList.NestedList to types.List")
						}
						if v.Null || v.Unknown {
							obj.NestedList = nil
						} else {
							obj.NestedList = make([]*OtherNested, len(v.Elems))
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedList.NestedList to types.Object")
								}
								var el *OtherNested
								if v.Null || v.Unknown {
									el = nil
								} else {
									el = &OtherNested{}
									tf := v
									obj := el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedList.NestedList.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.NestedList.NestedList.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.NestedList[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedList.Map)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedList.Map to types.Map")
						}
						if v.Null || v.Unknown {
							obj.Map = nil
						} else {
							obj.Map = make(map[string]string)
							for k, a := range v.Elems {
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedList.Map to types.String")
								}
								var el string
								if v.Unknown || v.Null {
									el = ""
								} else {
									convert := string(v.Value)
									el = convert
								}
								obj.Map[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedList.MapObjectNested)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedList.MapObjectNested to types.Map")
						}
						if v.Null || v.Unknown {
							obj.MapObjectNested = nil
						} else {
							obj.MapObjectNested = make(map[string]OtherNested)
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedList.MapObjectNested to types.Object")
								}
								var el OtherNested
								if v.Null || v.Unknown {
									el = OtherNested{}
								} else {
									tf := v
									obj := &el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedList.MapObjectNested.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.NestedList.MapObjectNested.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.MapObjectNested[k] = el
							}
						}
					}
				}
				obj.NestedList[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["nested_list_nullable"]
		if !ok {
			return fmt.Errorf("Attr nested_list_nullable is missing in the Terraform object (Test.NestedListNullable)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedListNullable to types.List")
		}
		if v.Null || v.Unknown {
			obj.NestedListNullable = nil
		} else {
			obj.NestedListNullable = make([]*Nested, len(v.Elems))
			for k, a := range v.Elems {
				v, ok := a.(types.Object)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedListNullable to types.Object")
				}
				var el *Nested
				if v.Null || v.Unknown {
					el = nil
				} else {
					el = &Nested{}
					tf := v
					obj := el
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedListNullable.Str)")
						}
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedListNullable.Str to types.String")
						}
						if v.Unknown || v.Null {
							obj.Str = ""
						} else {
							convert := string(v.Value)
							obj.Str = convert
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedListNullable.NestedList)")
						}
						v, ok := a.(types.List)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedListNullable.NestedList to types.List")
						}
						if v.Null || v.Unknown {
							obj.NestedList = nil
						} else {
							obj.NestedList = make([]*OtherNested, len(v.Elems))
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedListNullable.NestedList to types.Object")
								}
								var el *OtherNested
								if v.Null || v.Unknown {
									el = nil
								} else {
									el = &OtherNested{}
									tf := v
									obj := el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedListNullable.NestedList.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.NestedListNullable.NestedList.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.NestedList[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedListNullable.Map)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedListNullable.Map to types.Map")
						}
						if v.Null || v.Unknown {
							obj.Map = nil
						} else {
							obj.Map = make(map[string]string)
							for k, a := range v.Elems {
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedListNullable.Map to types.String")
								}
								var el string
								if v.Unknown || v.Null {
									el = ""
								} else {
									convert := string(v.Value)
									el = convert
								}
								obj.Map[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedListNullable.MapObjectNested)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.NestedListNullable.MapObjectNested to types.Map")
						}
						if v.Null || v.Unknown {
							obj.MapObjectNested = nil
						} else {
							obj.MapObjectNested = make(map[string]OtherNested)
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedListNullable.MapObjectNested to types.Object")
								}
								var el OtherNested
								if v.Null || v.Unknown {
									el = OtherNested{}
								} else {
									tf := v
									obj := &el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedListNullable.MapObjectNested.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.NestedListNullable.MapObjectNested.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.MapObjectNested[k] = el
							}
						}
					}
				}
				obj.NestedListNullable[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["map"]
		if !ok {
			return fmt.Errorf("Attr map is missing in the Terraform object (Test.Map)")
		}
		v, ok := a.(types.Map)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Map to types.Map")
		}
		if v.Null || v.Unknown {
			obj.Map = nil
		} else {
			obj.Map = make(map[string]string)
			for k, a := range v.Elems {
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.Map to types.String")
				}
				var el string
				if v.Unknown || v.Null {
					el = ""
				} else {
					convert := string(v.Value)
					el = convert
				}
				obj.Map[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["map_object"]
		if !ok {
			return fmt.Errorf("Attr map_object is missing in the Terraform object (Test.MapObject)")
		}
		v, ok := a.(types.Map)
		if !ok {
			return fmt.Errorf("Failed to convert Test.MapObject to types.Map")
		}
		if v.Null || v.Unknown {
			obj.MapObject = nil
		} else {
			obj.MapObject = make(map[string]Nested)
			for k, a := range v.Elems {
				v, ok := a.(types.Object)
				if !ok {
					return fmt.Errorf("Failed to convert Test.MapObject to types.Object")
				}
				var el Nested
				if v.Null || v.Unknown {
					el = Nested{}
				} else {
					tf := v
					obj := &el
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObject.Str)")
						}
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObject.Str to types.String")
						}
						if v.Unknown || v.Null {
							obj.Str = ""
						} else {
							convert := string(v.Value)
							obj.Str = convert
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.MapObject.NestedList)")
						}
						v, ok := a.(types.List)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObject.NestedList to types.List")
						}
						if v.Null || v.Unknown {
							obj.NestedList = nil
						} else {
							obj.NestedList = make([]*OtherNested, len(v.Elems))
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObject.NestedList to types.Object")
								}
								var el *OtherNested
								if v.Null || v.Unknown {
									el = nil
								} else {
									el = &OtherNested{}
									tf := v
									obj := el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObject.NestedList.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.MapObject.NestedList.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.NestedList[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							return fmt.Errorf("Attr map is missing in the Terraform object (Test.MapObject.Map)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObject.Map to types.Map")
						}
						if v.Null || v.Unknown {
							obj.Map = nil
						} else {
							obj.Map = make(map[string]string)
							for k, a := range v.Elems {
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObject.Map to types.String")
								}
								var el string
								if v.Unknown || v.Null {
									el = ""
								} else {
									convert := string(v.Value)
									el = convert
								}
								obj.Map[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.MapObject.MapObjectNested)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObject.MapObjectNested to types.Map")
						}
						if v.Null || v.Unknown {
							obj.MapObjectNested = nil
						} else {
							obj.MapObjectNested = make(map[string]OtherNested)
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObject.MapObjectNested to types.Object")
								}
								var el OtherNested
								if v.Null || v.Unknown {
									el = OtherNested{}
								} else {
									tf := v
									obj := &el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObject.MapObjectNested.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.MapObject.MapObjectNested.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.MapObjectNested[k] = el
							}
						}
					}
				}
				obj.MapObject[k] = el
			}
		}
	}
	{
		a, ok := tf.Attrs["map_object_nullable"]
		if !ok {
			return fmt.Errorf("Attr map_object_nullable is missing in the Terraform object (Test.MapObjectNullable)")
		}
		v, ok := a.(types.Map)
		if !ok {
			return fmt.Errorf("Failed to convert Test.MapObjectNullable to types.Map")
		}
		if v.Null || v.Unknown {
			obj.MapObjectNullable = nil
		} else {
			obj.MapObjectNullable = make(map[string]*Nested)
			for k, a := range v.Elems {
				v, ok := a.(types.Object)
				if !ok {
					return fmt.Errorf("Failed to convert Test.MapObjectNullable to types.Object")
				}
				var el *Nested
				if v.Null || v.Unknown {
					el = nil
				} else {
					el = &Nested{}
					tf := v
					obj := el
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObjectNullable.Str)")
						}
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObjectNullable.Str to types.String")
						}
						if v.Unknown || v.Null {
							obj.Str = ""
						} else {
							convert := string(v.Value)
							obj.Str = convert
						}
					}
					{
						a, ok := tf.Attrs["nested_list"]
						if !ok {
							return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.MapObjectNullable.NestedList)")
						}
						v, ok := a.(types.List)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObjectNullable.NestedList to types.List")
						}
						if v.Null || v.Unknown {
							obj.NestedList = nil
						} else {
							obj.NestedList = make([]*OtherNested, len(v.Elems))
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObjectNullable.NestedList to types.Object")
								}
								var el *OtherNested
								if v.Null || v.Unknown {
									el = nil
								} else {
									el = &OtherNested{}
									tf := v
									obj := el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObjectNullable.NestedList.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.MapObjectNullable.NestedList.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.NestedList[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map"]
						if !ok {
							return fmt.Errorf("Attr map is missing in the Terraform object (Test.MapObjectNullable.Map)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObjectNullable.Map to types.Map")
						}
						if v.Null || v.Unknown {
							obj.Map = nil
						} else {
							obj.Map = make(map[string]string)
							for k, a := range v.Elems {
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObjectNullable.Map to types.String")
								}
								var el string
								if v.Unknown || v.Null {
									el = ""
								} else {
									convert := string(v.Value)
									el = convert
								}
								obj.Map[k] = el
							}
						}
					}
					{
						a, ok := tf.Attrs["map_object_nested"]
						if !ok {
							return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.MapObjectNullable.MapObjectNested)")
						}
						v, ok := a.(types.Map)
						if !ok {
							return fmt.Errorf("Failed to convert Test.MapObjectNullable.MapObjectNested to types.Map")
						}
						if v.Null || v.Unknown {
							obj.MapObjectNested = nil
						} else {
							obj.MapObjectNested = make(map[string]OtherNested)
							for k, a := range v.Elems {
								v, ok := a.(types.Object)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObjectNullable.MapObjectNested to types.Object")
								}
								var el OtherNested
								if v.Null || v.Unknown {
									el = OtherNested{}
								} else {
									tf := v
									obj := &el
									{
										a, ok := tf.Attrs["str"]
										if !ok {
											return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObjectNullable.MapObjectNested.Str)")
										}
										v, ok := a.(types.String)
										if !ok {
											return fmt.Errorf("Failed to convert Test.MapObjectNullable.MapObjectNested.Str to types.String")
										}
										if v.Unknown || v.Null {
											obj.Str = ""
										} else {
											convert := string(v.Value)
											obj.Str = convert
										}
									}
								}
								obj.MapObjectNested[k] = el
							}
						}
					}
				}
				obj.MapObjectNullable[k] = el
			}
		}
	}
	return nil
}

// CopyTestToTerraform copies the contents of the source Terraform object into target struct
func CopyTestToTerraform(tf *types.Object, obj Test) error {
	{
		a, ok := tf.Attrs["str"]
		if !ok {
			return fmt.Errorf("Attr str is missing in the Terraform object (Test.Str)")
		}
		v, ok := a.(types.String)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Str to types.String")
		}
		v.Value = string(obj.Str)
		if obj.Str != "" {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["str"] = v
	}
	{
		a, ok := tf.Attrs["int32"]
		if !ok {
			return fmt.Errorf("Attr int32 is missing in the Terraform object (Test.Int32)")
		}
		v, ok := a.(types.Int64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Int32 to types.Int64")
		}
		v.Value = int64(obj.Int32)
		if obj.Int32 != 0 {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["int32"] = v
	}
	{
		a, ok := tf.Attrs["int64"]
		if !ok {
			return fmt.Errorf("Attr int64 is missing in the Terraform object (Test.Int64)")
		}
		v, ok := a.(types.Int64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Int64 to types.Int64")
		}
		v.Value = int64(obj.Int64)
		if obj.Int64 != 0 {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["int64"] = v
	}
	{
		a, ok := tf.Attrs["float"]
		if !ok {
			return fmt.Errorf("Attr float is missing in the Terraform object (Test.Float)")
		}
		v, ok := a.(types.Float64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Float to types.Float64")
		}
		v.Value = float64(obj.Float)
		if obj.Float != 0.0 {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["float"] = v
	}
	{
		a, ok := tf.Attrs["double"]
		if !ok {
			return fmt.Errorf("Attr double is missing in the Terraform object (Test.Double)")
		}
		v, ok := a.(types.Float64)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Double to types.Float64")
		}
		v.Value = float64(obj.Double)
		if obj.Double != 0.0 {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["double"] = v
	}
	{
		a, ok := tf.Attrs["bool"]
		if !ok {
			return fmt.Errorf("Attr bool is missing in the Terraform object (Test.Bool)")
		}
		v, ok := a.(types.Bool)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Bool to types.Bool")
		}
		v.Value = bool(obj.Bool)
		if obj.Bool != false {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["bool"] = v
	}
	{
		a, ok := tf.Attrs["bytes"]
		if !ok {
			return fmt.Errorf("Attr bytes is missing in the Terraform object (Test.Bytes)")
		}
		v, ok := a.(types.String)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Bytes to types.String")
		}
		v.Value = string(obj.Bytes)
		if obj.Bytes != nil {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["bytes"] = v
	}
	{
		a, ok := tf.Attrs["timestamp"]
		if !ok {
			return fmt.Errorf("Attr timestamp is missing in the Terraform object (Test.Timestamp)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Timestamp to TimeValue")
		}
		v.Value = time.Time(obj.Timestamp)
		if (obj.Timestamp != time.Time{}) {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["timestamp"] = v
	}
	{
		a, ok := tf.Attrs["timestamp_missing"]
		if !ok {
			return fmt.Errorf("Attr timestamp_missing is missing in the Terraform object (Test.TimestampMissing)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampMissing to TimeValue")
		}
		v.Value = time.Time(obj.TimestampMissing)
		if (obj.TimestampMissing != time.Time{}) {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["timestamp_missing"] = v
	}
	{
		a, ok := tf.Attrs["timestamp_nullable"]
		if !ok {
			return fmt.Errorf("Attr timestamp_nullable is missing in the Terraform object (Test.TimestampNullable)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampNullable to TimeValue")
		}
		if obj.TimestampNullable == nil {
			v.Null = true
			v.Unknown = false
			v.Value = time.Time{}
		} else {
			v.Null = false
			v.Unknown = false
			v.Value = time.Time(*obj.TimestampNullable)
		}
		tf.Attrs["timestamp_nullable"] = v
	}
	{
		a, ok := tf.Attrs["timestamp_nullable_with_nil_value"]
		if !ok {
			return fmt.Errorf("Attr timestamp_nullable_with_nil_value is missing in the Terraform object (Test.TimestampNullableWithNilValue)")
		}
		v, ok := a.(TimeValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampNullableWithNilValue to TimeValue")
		}
		if obj.TimestampNullableWithNilValue == nil {
			v.Null = true
			v.Unknown = false
			v.Value = time.Time{}
		} else {
			v.Null = false
			v.Unknown = false
			v.Value = time.Time(*obj.TimestampNullableWithNilValue)
		}
		tf.Attrs["timestamp_nullable_with_nil_value"] = v
	}
	{
		a, ok := tf.Attrs["duration_standard"]
		if !ok {
			return fmt.Errorf("Attr duration_standard is missing in the Terraform object (Test.DurationStandard)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationStandard to DurationValue")
		}
		v.Value = time.Duration(obj.DurationStandard)
		if obj.DurationStandard != 0 {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["duration_standard"] = v
	}
	{
		a, ok := tf.Attrs["duration_standard_missing"]
		if !ok {
			return fmt.Errorf("Attr duration_standard_missing is missing in the Terraform object (Test.DurationStandardMissing)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationStandardMissing to DurationValue")
		}
		v.Value = time.Duration(obj.DurationStandardMissing)
		if obj.DurationStandardMissing != 0 {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["duration_standard_missing"] = v
	}
	{
		a, ok := tf.Attrs["duration_custom"]
		if !ok {
			return fmt.Errorf("Attr duration_custom is missing in the Terraform object (Test.DurationCustom)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationCustom to DurationValue")
		}
		v.Value = time.Duration(obj.DurationCustom)
		if obj.DurationCustom != Duration(0) {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["duration_custom"] = v
	}
	{
		a, ok := tf.Attrs["duration_custom_missing"]
		if !ok {
			return fmt.Errorf("Attr duration_custom_missing is missing in the Terraform object (Test.DurationCustomMissing)")
		}
		v, ok := a.(DurationValue)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationCustomMissing to DurationValue")
		}
		v.Value = time.Duration(obj.DurationCustomMissing)
		if obj.DurationCustomMissing != Duration(0) {
			v.Null = false
		}
		v.Unknown = false
		tf.Attrs["duration_custom_missing"] = v
	}
	{
		a, ok := tf.Attrs["string_list"]
		if !ok {
			return fmt.Errorf("Attr string_list is missing in the Terraform object (Test.StringList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.StringList to types.List")
		}
		if obj.StringList == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.StringList))
			for k, x := range obj.StringList {
				e[k] = types.String{Value: string(x)}
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["string_list_empty"]
		if !ok {
			return fmt.Errorf("Attr string_list_empty is missing in the Terraform object (Test.StringListEmpty)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.StringListEmpty to types.List")
		}
		if obj.StringListEmpty == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.StringListEmpty))
			for k, x := range obj.StringListEmpty {
				e[k] = types.String{Value: string(x)}
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["bool_custom_list"]
		if !ok {
			return fmt.Errorf("Attr bool_custom_list is missing in the Terraform object (Test.BoolCustomList)")
		}
		err := CopyToBoolCustom(a, obj.BoolCustomList)
		if err != nil {
			return err
		}
	}
	{
		a, ok := tf.Attrs["bytes_list"]
		if !ok {
			return fmt.Errorf("Attr bytes_list is missing in the Terraform object (Test.BytesList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.BytesList to types.List")
		}
		if obj.BytesList == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.BytesList))
			for k, x := range obj.BytesList {
				e[k] = types.String{Value: string(x)}
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["timestamp_list"]
		if !ok {
			return fmt.Errorf("Attr timestamp_list is missing in the Terraform object (Test.TimestampList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.TimestampList to types.List")
		}
		if obj.TimestampList == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.TimestampList))
			for k, x := range obj.TimestampList {
				e[k] = TimeValue{Value: time.Time(*x)}
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["duration_custom_list"]
		if !ok {
			return fmt.Errorf("Attr duration_custom_list is missing in the Terraform object (Test.DurationCustomList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.DurationCustomList to types.List")
		}
		if obj.DurationCustomList == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.DurationCustomList))
			for k, x := range obj.DurationCustomList {
				e[k] = DurationValue{Value: time.Duration(x)}
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["nested"]
		if !ok {
			return fmt.Errorf("Attr nested is missing in the Terraform object (Test.Nested)")
		}
		v, ok := a.(types.Object)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Nested to types.Object")
		}
		obj := obj.Nested
		tf := v
		{
			a, ok := tf.Attrs["str"]
			if !ok {
				return fmt.Errorf("Attr str is missing in the Terraform object (Test.Nested.Str)")
			}
			v, ok := a.(types.String)
			if !ok {
				return fmt.Errorf("Failed to convert Test.Nested.Str to types.String")
			}
			v.Value = string(obj.Str)
			if obj.Str != "" {
				v.Null = false
			}
			v.Unknown = false
			tf.Attrs["str"] = v
		}
		{
			a, ok := tf.Attrs["nested_list"]
			if !ok {
				return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.Nested.NestedList)")
			}
			v, ok := a.(types.List)
			if !ok {
				return fmt.Errorf("Failed to convert Test.Nested.NestedList to types.List")
			}
			if obj.NestedList == nil {
				v.Null = true
			} else {
				e := make([]attr.Value, len(obj.NestedList))
				for k, x := range obj.NestedList {
					tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
					obj := x
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							return fmt.Errorf("Attr str is missing in the Terraform object (Test.Nested.NestedList.Str)")
						}
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.Nested.NestedList.Str to types.String")
						}
						v.Value = string(obj.Str)
						if obj.Str != "" {
							v.Null = false
						}
						v.Unknown = false
						tf.Attrs["str"] = v
					}
					e[k] = tf
				}
				v.Elems = e
				v.Null = false
			}
			v.Unknown = false
		}
		{
			a, ok := tf.Attrs["map"]
			if !ok {
				return fmt.Errorf("Attr map is missing in the Terraform object (Test.Nested.Map)")
			}
			v, ok := a.(types.Map)
			if !ok {
				return fmt.Errorf("Failed to convert Test.Nested.Map to types.Map")
			}
			if obj.Map == nil {
				v.Null = true
			} else {
				e := make(map[string]attr.Value)
				for k, x := range obj.Map {
					e[k] = types.String{Value: string(x)}
				}
				v.Elems = e
				v.Null = false
			}
			v.Unknown = false
		}
		{
			a, ok := tf.Attrs["map_object_nested"]
			if !ok {
				return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.Nested.MapObjectNested)")
			}
			v, ok := a.(types.Map)
			if !ok {
				return fmt.Errorf("Failed to convert Test.Nested.MapObjectNested to types.Map")
			}
			if obj.MapObjectNested == nil {
				v.Null = true
			} else {
				e := make(map[string]attr.Value)
				for k, x := range obj.MapObjectNested {
					tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
					obj := x
					{
						a, ok := tf.Attrs["str"]
						if !ok {
							return fmt.Errorf("Attr str is missing in the Terraform object (Test.Nested.MapObjectNested.Str)")
						}
						v, ok := a.(types.String)
						if !ok {
							return fmt.Errorf("Failed to convert Test.Nested.MapObjectNested.Str to types.String")
						}
						v.Value = string(obj.Str)
						if obj.Str != "" {
							v.Null = false
						}
						v.Unknown = false
						tf.Attrs["str"] = v
					}
					e[k] = tf
				}
				v.Elems = e
				v.Null = false
			}
			v.Unknown = false
		}
	}
	{
		a, ok := tf.Attrs["nested_nullable"]
		if !ok {
			return fmt.Errorf("Attr nested_nullable is missing in the Terraform object (Test.NestedNullable)")
		}
		v, ok := a.(types.Object)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedNullable to types.Object")
		}
		if obj.NestedNullable != nil {
			obj := obj.NestedNullable
			tf := v
			{
				a, ok := tf.Attrs["str"]
				if !ok {
					return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullable.Str)")
				}
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.Str to types.String")
				}
				v.Value = string(obj.Str)
				if obj.Str != "" {
					v.Null = false
				}
				v.Unknown = false
				tf.Attrs["str"] = v
			}
			{
				a, ok := tf.Attrs["nested_list"]
				if !ok {
					return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedNullable.NestedList)")
				}
				v, ok := a.(types.List)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.NestedList to types.List")
				}
				if obj.NestedList == nil {
					v.Null = true
				} else {
					e := make([]attr.Value, len(obj.NestedList))
					for k, x := range obj.NestedList {
						tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
						obj := x
						{
							a, ok := tf.Attrs["str"]
							if !ok {
								return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullable.NestedList.Str)")
							}
							v, ok := a.(types.String)
							if !ok {
								return fmt.Errorf("Failed to convert Test.NestedNullable.NestedList.Str to types.String")
							}
							v.Value = string(obj.Str)
							if obj.Str != "" {
								v.Null = false
							}
							v.Unknown = false
							tf.Attrs["str"] = v
						}
						e[k] = tf
					}
					v.Elems = e
					v.Null = false
				}
				v.Unknown = false
			}
			{
				a, ok := tf.Attrs["map"]
				if !ok {
					return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedNullable.Map)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.Map to types.Map")
				}
				if obj.Map == nil {
					v.Null = true
				} else {
					e := make(map[string]attr.Value)
					for k, x := range obj.Map {
						e[k] = types.String{Value: string(x)}
					}
					v.Elems = e
					v.Null = false
				}
				v.Unknown = false
			}
			{
				a, ok := tf.Attrs["map_object_nested"]
				if !ok {
					return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedNullable.MapObjectNested)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullable.MapObjectNested to types.Map")
				}
				if obj.MapObjectNested == nil {
					v.Null = true
				} else {
					e := make(map[string]attr.Value)
					for k, x := range obj.MapObjectNested {
						tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
						obj := x
						{
							a, ok := tf.Attrs["str"]
							if !ok {
								return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullable.MapObjectNested.Str)")
							}
							v, ok := a.(types.String)
							if !ok {
								return fmt.Errorf("Failed to convert Test.NestedNullable.MapObjectNested.Str to types.String")
							}
							v.Value = string(obj.Str)
							if obj.Str != "" {
								v.Null = false
							}
							v.Unknown = false
							tf.Attrs["str"] = v
						}
						e[k] = tf
					}
					v.Elems = e
					v.Null = false
				}
				v.Unknown = false
			}
		} else {
			v.Null = true
			v.Unknown = false
		}
	}
	{
		a, ok := tf.Attrs["nested_nullable_with_nil_value"]
		if !ok {
			return fmt.Errorf("Attr nested_nullable_with_nil_value is missing in the Terraform object (Test.NestedNullableWithNilValue)")
		}
		v, ok := a.(types.Object)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue to types.Object")
		}
		if obj.NestedNullableWithNilValue != nil {
			obj := obj.NestedNullableWithNilValue
			tf := v
			{
				a, ok := tf.Attrs["str"]
				if !ok {
					return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullableWithNilValue.Str)")
				}
				v, ok := a.(types.String)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.Str to types.String")
				}
				v.Value = string(obj.Str)
				if obj.Str != "" {
					v.Null = false
				}
				v.Unknown = false
				tf.Attrs["str"] = v
			}
			{
				a, ok := tf.Attrs["nested_list"]
				if !ok {
					return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedNullableWithNilValue.NestedList)")
				}
				v, ok := a.(types.List)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.NestedList to types.List")
				}
				if obj.NestedList == nil {
					v.Null = true
				} else {
					e := make([]attr.Value, len(obj.NestedList))
					for k, x := range obj.NestedList {
						tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
						obj := x
						{
							a, ok := tf.Attrs["str"]
							if !ok {
								return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullableWithNilValue.NestedList.Str)")
							}
							v, ok := a.(types.String)
							if !ok {
								return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.NestedList.Str to types.String")
							}
							v.Value = string(obj.Str)
							if obj.Str != "" {
								v.Null = false
							}
							v.Unknown = false
							tf.Attrs["str"] = v
						}
						e[k] = tf
					}
					v.Elems = e
					v.Null = false
				}
				v.Unknown = false
			}
			{
				a, ok := tf.Attrs["map"]
				if !ok {
					return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedNullableWithNilValue.Map)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.Map to types.Map")
				}
				if obj.Map == nil {
					v.Null = true
				} else {
					e := make(map[string]attr.Value)
					for k, x := range obj.Map {
						e[k] = types.String{Value: string(x)}
					}
					v.Elems = e
					v.Null = false
				}
				v.Unknown = false
			}
			{
				a, ok := tf.Attrs["map_object_nested"]
				if !ok {
					return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedNullableWithNilValue.MapObjectNested)")
				}
				v, ok := a.(types.Map)
				if !ok {
					return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.MapObjectNested to types.Map")
				}
				if obj.MapObjectNested == nil {
					v.Null = true
				} else {
					e := make(map[string]attr.Value)
					for k, x := range obj.MapObjectNested {
						tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
						obj := x
						{
							a, ok := tf.Attrs["str"]
							if !ok {
								return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedNullableWithNilValue.MapObjectNested.Str)")
							}
							v, ok := a.(types.String)
							if !ok {
								return fmt.Errorf("Failed to convert Test.NestedNullableWithNilValue.MapObjectNested.Str to types.String")
							}
							v.Value = string(obj.Str)
							if obj.Str != "" {
								v.Null = false
							}
							v.Unknown = false
							tf.Attrs["str"] = v
						}
						e[k] = tf
					}
					v.Elems = e
					v.Null = false
				}
				v.Unknown = false
			}
		} else {
			v.Null = true
			v.Unknown = false
		}
	}
	{
		a, ok := tf.Attrs["nested_list"]
		if !ok {
			return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedList)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedList to types.List")
		}
		if obj.NestedList == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.NestedList))
			for k, x := range obj.NestedList {
				tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
				obj := x
				{
					a, ok := tf.Attrs["str"]
					if !ok {
						return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedList.Str)")
					}
					v, ok := a.(types.String)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedList.Str to types.String")
					}
					v.Value = string(obj.Str)
					if obj.Str != "" {
						v.Null = false
					}
					v.Unknown = false
					tf.Attrs["str"] = v
				}
				{
					a, ok := tf.Attrs["nested_list"]
					if !ok {
						return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedList.NestedList)")
					}
					v, ok := a.(types.List)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedList.NestedList to types.List")
					}
					if obj.NestedList == nil {
						v.Null = true
					} else {
						e := make([]attr.Value, len(obj.NestedList))
						for k, x := range obj.NestedList {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedList.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedList.NestedList.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map"]
					if !ok {
						return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedList.Map)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedList.Map to types.Map")
					}
					if obj.Map == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.Map {
							e[k] = types.String{Value: string(x)}
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map_object_nested"]
					if !ok {
						return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedList.MapObjectNested)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedList.MapObjectNested to types.Map")
					}
					if obj.MapObjectNested == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.MapObjectNested {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedList.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedList.MapObjectNested.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				e[k] = tf
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["nested_list_nullable"]
		if !ok {
			return fmt.Errorf("Attr nested_list_nullable is missing in the Terraform object (Test.NestedListNullable)")
		}
		v, ok := a.(types.List)
		if !ok {
			return fmt.Errorf("Failed to convert Test.NestedListNullable to types.List")
		}
		if obj.NestedListNullable == nil {
			v.Null = true
		} else {
			e := make([]attr.Value, len(obj.NestedListNullable))
			for k, x := range obj.NestedListNullable {
				tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
				obj := x
				{
					a, ok := tf.Attrs["str"]
					if !ok {
						return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedListNullable.Str)")
					}
					v, ok := a.(types.String)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedListNullable.Str to types.String")
					}
					v.Value = string(obj.Str)
					if obj.Str != "" {
						v.Null = false
					}
					v.Unknown = false
					tf.Attrs["str"] = v
				}
				{
					a, ok := tf.Attrs["nested_list"]
					if !ok {
						return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.NestedListNullable.NestedList)")
					}
					v, ok := a.(types.List)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedListNullable.NestedList to types.List")
					}
					if obj.NestedList == nil {
						v.Null = true
					} else {
						e := make([]attr.Value, len(obj.NestedList))
						for k, x := range obj.NestedList {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedListNullable.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedListNullable.NestedList.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map"]
					if !ok {
						return fmt.Errorf("Attr map is missing in the Terraform object (Test.NestedListNullable.Map)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedListNullable.Map to types.Map")
					}
					if obj.Map == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.Map {
							e[k] = types.String{Value: string(x)}
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map_object_nested"]
					if !ok {
						return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.NestedListNullable.MapObjectNested)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.NestedListNullable.MapObjectNested to types.Map")
					}
					if obj.MapObjectNested == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.MapObjectNested {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.NestedListNullable.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.NestedListNullable.MapObjectNested.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				e[k] = tf
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["map"]
		if !ok {
			return fmt.Errorf("Attr map is missing in the Terraform object (Test.Map)")
		}
		v, ok := a.(types.Map)
		if !ok {
			return fmt.Errorf("Failed to convert Test.Map to types.Map")
		}
		if obj.Map == nil {
			v.Null = true
		} else {
			e := make(map[string]attr.Value)
			for k, x := range obj.Map {
				e[k] = types.String{Value: string(x)}
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["map_object"]
		if !ok {
			return fmt.Errorf("Attr map_object is missing in the Terraform object (Test.MapObject)")
		}
		v, ok := a.(types.Map)
		if !ok {
			return fmt.Errorf("Failed to convert Test.MapObject to types.Map")
		}
		if obj.MapObject == nil {
			v.Null = true
		} else {
			e := make(map[string]attr.Value)
			for k, x := range obj.MapObject {
				tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
				obj := x
				{
					a, ok := tf.Attrs["str"]
					if !ok {
						return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObject.Str)")
					}
					v, ok := a.(types.String)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObject.Str to types.String")
					}
					v.Value = string(obj.Str)
					if obj.Str != "" {
						v.Null = false
					}
					v.Unknown = false
					tf.Attrs["str"] = v
				}
				{
					a, ok := tf.Attrs["nested_list"]
					if !ok {
						return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.MapObject.NestedList)")
					}
					v, ok := a.(types.List)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObject.NestedList to types.List")
					}
					if obj.NestedList == nil {
						v.Null = true
					} else {
						e := make([]attr.Value, len(obj.NestedList))
						for k, x := range obj.NestedList {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObject.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObject.NestedList.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map"]
					if !ok {
						return fmt.Errorf("Attr map is missing in the Terraform object (Test.MapObject.Map)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObject.Map to types.Map")
					}
					if obj.Map == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.Map {
							e[k] = types.String{Value: string(x)}
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map_object_nested"]
					if !ok {
						return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.MapObject.MapObjectNested)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObject.MapObjectNested to types.Map")
					}
					if obj.MapObjectNested == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.MapObjectNested {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObject.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObject.MapObjectNested.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				e[k] = tf
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	{
		a, ok := tf.Attrs["map_object_nullable"]
		if !ok {
			return fmt.Errorf("Attr map_object_nullable is missing in the Terraform object (Test.MapObjectNullable)")
		}
		v, ok := a.(types.Map)
		if !ok {
			return fmt.Errorf("Failed to convert Test.MapObjectNullable to types.Map")
		}
		if obj.MapObjectNullable == nil {
			v.Null = true
		} else {
			e := make(map[string]attr.Value)
			for k, x := range obj.MapObjectNullable {
				tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
				obj := x
				{
					a, ok := tf.Attrs["str"]
					if !ok {
						return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObjectNullable.Str)")
					}
					v, ok := a.(types.String)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObjectNullable.Str to types.String")
					}
					v.Value = string(obj.Str)
					if obj.Str != "" {
						v.Null = false
					}
					v.Unknown = false
					tf.Attrs["str"] = v
				}
				{
					a, ok := tf.Attrs["nested_list"]
					if !ok {
						return fmt.Errorf("Attr nested_list is missing in the Terraform object (Test.MapObjectNullable.NestedList)")
					}
					v, ok := a.(types.List)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObjectNullable.NestedList to types.List")
					}
					if obj.NestedList == nil {
						v.Null = true
					} else {
						e := make([]attr.Value, len(obj.NestedList))
						for k, x := range obj.NestedList {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObjectNullable.NestedList.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObjectNullable.NestedList.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map"]
					if !ok {
						return fmt.Errorf("Attr map is missing in the Terraform object (Test.MapObjectNullable.Map)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObjectNullable.Map to types.Map")
					}
					if obj.Map == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.Map {
							e[k] = types.String{Value: string(x)}
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				{
					a, ok := tf.Attrs["map_object_nested"]
					if !ok {
						return fmt.Errorf("Attr map_object_nested is missing in the Terraform object (Test.MapObjectNullable.MapObjectNested)")
					}
					v, ok := a.(types.Map)
					if !ok {
						return fmt.Errorf("Failed to convert Test.MapObjectNullable.MapObjectNested to types.Map")
					}
					if obj.MapObjectNested == nil {
						v.Null = true
					} else {
						e := make(map[string]attr.Value)
						for k, x := range obj.MapObjectNested {
							tf := types.Object{AttrTypes: v.ElemType.(types.ObjectType).AttrTypes}
							obj := x
							{
								a, ok := tf.Attrs["str"]
								if !ok {
									return fmt.Errorf("Attr str is missing in the Terraform object (Test.MapObjectNullable.MapObjectNested.Str)")
								}
								v, ok := a.(types.String)
								if !ok {
									return fmt.Errorf("Failed to convert Test.MapObjectNullable.MapObjectNested.Str to types.String")
								}
								v.Value = string(obj.Str)
								if obj.Str != "" {
									v.Null = false
								}
								v.Unknown = false
								tf.Attrs["str"] = v
							}
							e[k] = tf
						}
						v.Elems = e
						v.Null = false
					}
					v.Unknown = false
				}
				e[k] = tf
			}
			v.Elems = e
			v.Null = false
		}
		v.Unknown = false
	}
	return nil
}
