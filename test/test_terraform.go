/*
Copyright 2015-2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package test

import (
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	validation "github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

var (
	// SchemaTest is schema for Test message definition.
	SchemaTest = GenSchemaTest()

	// SchemaMetaTest is schema metadata for Test message definition.
	SchemaMetaTest = GenSchemaMetaTest()
)

// SchemaMeta represents schema metadata struct
type SchemaMeta struct {
	name       string
	isTime     bool
	isDuration bool
	nested     map[string]*SchemaMeta
}

func SupressDurationChange(k string, old string, new string, d *schema.ResourceData) bool {
	o, err := time.ParseDuration(old)
	if err != nil {
		return false
	}

	n, err := time.ParseDuration(new)
	if err != nil {
		return false
	}

	return o == n
}

// SchemaTest returns schema for Test
//
// Test message definition.
func GenSchemaTest() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// Str string field
		"str": {
			Type:        schema.TypeString,
			Description: "Str string field",
			Optional:    true,
		},
		// Int32 int32 field
		"int32": {
			Type:        schema.TypeInt,
			Description: "Int32 int32 field",
			Optional:    true,
		},
		// Int64 int64 field
		"int64": {
			Type:        schema.TypeInt,
			Description: "Int64 int64 field",
			Optional:    true,
		},
		// Float float field
		"float": {
			Type:        schema.TypeFloat,
			Description: "Float float field",
			Optional:    true,
		},
		// Double double field
		"double": {
			Type:        schema.TypeFloat,
			Description: "Double double field",
			Optional:    true,
		},
		// Bool bool field
		"bool": {
			Type:        schema.TypeBool,
			Description: "Bool bool field",
			Optional:    true,
		},
		// Bytest byte[] field
		"bytes": {
			Type:        schema.TypeString,
			Description: "Bytest byte[] field",
			Optional:    true,
		},
		// Timestamp time.Time field
		"timestamp": {
			Type:         schema.TypeString,
			Description:  "Timestamp time.Time field",
			ValidateFunc: validation.IsRFC3339Time,
			Optional:     true,
		},
		// Timestamp time.Time field
		"timestamp_missing": {
			Type:         schema.TypeString,
			Description:  "Timestamp time.Time field",
			ValidateFunc: validation.IsRFC3339Time,
			Optional:     true,
		},
		// TimestampNullable *time.Time field
		"timestamp_nullable": {
			Type:         schema.TypeString,
			Description:  "TimestampNullable *time.Time field",
			ValidateFunc: validation.IsRFC3339Time,
			Optional:     true,
		},
		// TimestampNullableWithNilValue *time.Time field
		"timestamp_nullable_with_nil_value": {
			Type:         schema.TypeString,
			Description:  "TimestampNullableWithNilValue *time.Time field",
			ValidateFunc: validation.IsRFC3339Time,
			Optional:     true,
		},
		// DurationStandard time.Duration field (standard)
		"duration_standard": {
			Type:             schema.TypeString,
			Description:      "DurationStandard time.Duration field (standard)",
			DiffSuppressFunc: SupressDurationChange,
			Optional:         true,
		},
		// DurationStandardMissing time.Duration field (standard) missing in input data
		"duration_standard_missing": {
			Type:             schema.TypeString,
			Description:      "DurationStandardMissing time.Duration field (standard) missing in input data",
			DiffSuppressFunc: SupressDurationChange,
			Optional:         true,
		},
		// DurationCustom time.Duration field (with casttype)
		"duration_custom": {
			Type:             schema.TypeString,
			Description:      "DurationCustom time.Duration field (with casttype)",
			DiffSuppressFunc: SupressDurationChange,
			Optional:         true,
		},
		// DurationCustomMissing time.Duration field (with casttype) missing in input data
		"duration_custom_missing": {
			Type:             schema.TypeString,
			Description:      "DurationCustomMissing time.Duration field (with casttype) missing in input data",
			DiffSuppressFunc: SupressDurationChange,
			Optional:         true,
		},
		// StringList []string field
		"string_list": {

			Optional:    true,
			Type:        schema.TypeList,
			Description: "StringList []string field",
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// StringListEmpty []string field
		"string_list_empty": {

			Optional:    true,
			Type:        schema.TypeList,
			Description: "StringListEmpty []string field",
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// TimestampList []time.Time field
		"timestamp_list": {

			Optional:    true,
			Type:        schema.TypeList,
			Description: "TimestampList []time.Time field",
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// DurationCustomList []time.Duration field
		"duration_custom_list": {

			Optional:    true,
			Type:        schema.TypeList,
			Description: "DurationCustomList []time.Duration field",
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		},
		// Nested nested message field, non-nullable
		"nested": {
			Type:        schema.TypeList,
			MaxItems:    1,
			Description: "Nested message definition",
			Optional:    true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// Str string field
					"str": {
						Type:        schema.TypeString,
						Description: "Str string field",
						Optional:    true,
					},
					// Nested repeated nested messages
					"nested_list": {

						Optional:    true,
						Type:        schema.TypeList,
						Description: "Nested repeated nested messages",
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								// Str string field
								"str": {
									Type:        schema.TypeString,
									Description: "Str string field",
									Optional:    true,
								},
							},
						},
					},
				},
			},
		},
		// NestedNullable nested message field, nullabel
		"nested_nullable": {
			Type:        schema.TypeList,
			MaxItems:    1,
			Description: "Nested message definition",
			Optional:    true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// Str string field
					"str": {
						Type:        schema.TypeString,
						Description: "Str string field",
						Optional:    true,
					},
					// Nested repeated nested messages
					"nested_list": {

						Optional:    true,
						Type:        schema.TypeList,
						Description: "Nested repeated nested messages",
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								// Str string field
								"str": {
									Type:        schema.TypeString,
									Description: "Str string field",
									Optional:    true,
								},
							},
						},
					},
				},
			},
		},
		// NestedNullableWithNilValue nested message field, with no value set
		"nested_nullable_with_nil_value": {
			Type:        schema.TypeList,
			MaxItems:    1,
			Description: "Nested message definition",
			Optional:    true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// Str string field
					"str": {
						Type:        schema.TypeString,
						Description: "Str string field",
						Optional:    true,
					},
					// Nested repeated nested messages
					"nested_list": {

						Optional:    true,
						Type:        schema.TypeList,
						Description: "Nested repeated nested messages",
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								// Str string field
								"str": {
									Type:        schema.TypeString,
									Description: "Str string field",
									Optional:    true,
								},
							},
						},
					},
				},
			},
		},
		// NestedList nested message array
		"nested_list": {

			Optional:    true,
			Type:        schema.TypeList,
			Description: "NestedList nested message array",
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// Str string field
					"str": {
						Type:        schema.TypeString,
						Description: "Str string field",
						Optional:    true,
					},
					// Nested repeated nested messages
					"nested_list": {

						Optional:    true,
						Type:        schema.TypeList,
						Description: "Nested repeated nested messages",
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								// Str string field
								"str": {
									Type:        schema.TypeString,
									Description: "Str string field",
									Optional:    true,
								},
							},
						},
					},
				},
			},
		},
		// NestedListNullable nested message array
		"nested_list_nullable": {

			Optional:    true,
			Type:        schema.TypeList,
			Description: "NestedListNullable nested message array",
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					// Str string field
					"str": {
						Type:        schema.TypeString,
						Description: "Str string field",
						Optional:    true,
					},
					// Nested repeated nested messages
					"nested_list": {

						Optional:    true,
						Type:        schema.TypeList,
						Description: "Nested repeated nested messages",
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								// Str string field
								"str": {
									Type:        schema.TypeString,
									Description: "Str string field",
									Optional:    true,
								},
							},
						},
					},
				},
			},
		},
	}
}

// GenSchemaMetaTest returns schema for Test
//
// Test message definition.
func GenSchemaMetaTest() map[string]*SchemaMeta {
	return map[string]*SchemaMeta{
		// Str string field
		"str": {
			name:       "Str",
			isTime:     false,
			isDuration: false,
		},

		// Int32 int32 field
		"int32": {
			name:       "Int32",
			isTime:     false,
			isDuration: false,
		},

		// Int64 int64 field
		"int64": {
			name:       "Int64",
			isTime:     false,
			isDuration: false,
		},

		// Float float field
		"float": {
			name:       "Float",
			isTime:     false,
			isDuration: false,
		},

		// Double double field
		"double": {
			name:       "Double",
			isTime:     false,
			isDuration: false,
		},

		// Bool bool field
		"bool": {
			name:       "Bool",
			isTime:     false,
			isDuration: false,
		},

		// Bytest byte[] field
		"bytes": {
			name:       "Bytes",
			isTime:     false,
			isDuration: false,
		},

		// Timestamp time.Time field
		"timestamp": {
			name:       "Timestamp",
			isTime:     true,
			isDuration: false,
		},

		// Timestamp time.Time field
		"timestamp_missing": {
			name:       "TimestampMissing",
			isTime:     true,
			isDuration: false,
		},

		// TimestampNullable *time.Time field
		"timestamp_nullable": {
			name:       "TimestampNullable",
			isTime:     true,
			isDuration: false,
		},

		// TimestampNullableWithNilValue *time.Time field
		"timestamp_nullable_with_nil_value": {
			name:       "TimestampNullableWithNilValue",
			isTime:     true,
			isDuration: false,
		},

		// DurationStandard time.Duration field (standard)
		"duration_standard": {
			name:       "DurationStandard",
			isTime:     false,
			isDuration: true,
		},

		// DurationStandardMissing time.Duration field (standard) missing in input data
		"duration_standard_missing": {
			name:       "DurationStandardMissing",
			isTime:     false,
			isDuration: true,
		},

		// DurationCustom time.Duration field (with casttype)
		"duration_custom": {
			name:       "DurationCustom",
			isTime:     false,
			isDuration: true,
		},

		// DurationCustomMissing time.Duration field (with casttype) missing in input data
		"duration_custom_missing": {
			name:       "DurationCustomMissing",
			isTime:     false,
			isDuration: true,
		},

		// StringList []string field
		"string_list": {
			name:       "StringList",
			isTime:     false,
			isDuration: false,
		},

		// StringListEmpty []string field
		"string_list_empty": {
			name:       "StringListEmpty",
			isTime:     false,
			isDuration: false,
		},

		// TimestampList []time.Time field
		"timestamp_list": {
			name:       "TimestampList",
			isTime:     true,
			isDuration: false,
		},

		// DurationCustomList []time.Duration field
		"duration_custom_list": {
			name:       "DurationCustomList",
			isTime:     false,
			isDuration: true,
		},

		// Nested nested message field, non-nullable
		"nested": {
			name: "Nested",
			nested: map[string]*SchemaMeta{
				// Str string field
				"str": {
					name:       "Str",
					isTime:     false,
					isDuration: false,
				},

				// Nested repeated nested messages
				"nested_list": {
					name: "NestedList",
					nested: map[string]*SchemaMeta{
						// Str string field
						"str": {
							name:       "Str",
							isTime:     false,
							isDuration: false,
						},
					},
				},
			},
		},

		// NestedNullable nested message field, nullabel
		"nested_nullable": {
			name: "NestedNullable",
			nested: map[string]*SchemaMeta{
				// Str string field
				"str": {
					name:       "Str",
					isTime:     false,
					isDuration: false,
				},

				// Nested repeated nested messages
				"nested_list": {
					name: "NestedList",
					nested: map[string]*SchemaMeta{
						// Str string field
						"str": {
							name:       "Str",
							isTime:     false,
							isDuration: false,
						},
					},
				},
			},
		},

		// NestedNullableWithNilValue nested message field, with no value set
		"nested_nullable_with_nil_value": {
			name: "NestedNullableWithNilValue",
			nested: map[string]*SchemaMeta{
				// Str string field
				"str": {
					name:       "Str",
					isTime:     false,
					isDuration: false,
				},

				// Nested repeated nested messages
				"nested_list": {
					name: "NestedList",
					nested: map[string]*SchemaMeta{
						// Str string field
						"str": {
							name:       "Str",
							isTime:     false,
							isDuration: false,
						},
					},
				},
			},
		},

		// NestedList nested message array
		"nested_list": {
			name: "NestedList",
			nested: map[string]*SchemaMeta{
				// Str string field
				"str": {
					name:       "Str",
					isTime:     false,
					isDuration: false,
				},

				// Nested repeated nested messages
				"nested_list": {
					name: "NestedList",
					nested: map[string]*SchemaMeta{
						// Str string field
						"str": {
							name:       "Str",
							isTime:     false,
							isDuration: false,
						},
					},
				},
			},
		},

		// NestedListNullable nested message array
		"nested_list_nullable": {
			name: "NestedListNullable",
			nested: map[string]*SchemaMeta{
				// Str string field
				"str": {
					name:       "Str",
					isTime:     false,
					isDuration: false,
				},

				// Nested repeated nested messages
				"nested_list": {
					name: "NestedList",
					nested: map[string]*SchemaMeta{
						// Str string field
						"str": {
							name:       "Str",
							isTime:     false,
							isDuration: false,
						},
					},
				},
			},
		},
	}
}
